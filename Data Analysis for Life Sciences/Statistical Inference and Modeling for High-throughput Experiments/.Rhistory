median(estimate2$df2)
View(estimate)
estimate2 = fitFDist(xs,8)
#Question 6
#A
set.seed(28)
B = 1000
estimates = replicate(B,{
x = rf(100,df1=8,df2=16)
estimates = fitFDist(xs,8)
return(estimates$df2)
})
median(estimates)
#Question 6
#A
set.seed(28)
B = 1000
estimates = replicate(B,{
xs = rf(100,df1=8,df2=16)
estimates = fitFDist(xs,8)
return(estimates$df2)
})
median(estimates)
#B
mean(estimates <20 & >12)
#B
mean(estimates<20)
#B
B = mean(estimates)<20 & mean(estimates)<12
B
#B
B = mean(estimates)<20 & mean(estimates)>12
B
#B
B = mean(estimates)<20
#B
B = mean(estimates<20)&mean(estimates>12)
B
#B
mean(estimates<20)&mean(estimates>12)
#B
mean((estimates<20)&(estimates>12))
#Question 7
set.seed(28)
#Question 7
set.seed(28)
B = 1000
estimates = replicate(B,{
xs = rf(1000,df1=8,df2=16)
estimates = fitFDist(xs,8)
return(estimates$df2)
})
median(estimates)
#B
mean((estimates<20)&(estimates>12))
summary(estimates)
boxplot(estimates)
#Question 7
set.seed(28)
B = 1000
estimates2 = replicate(B,{
xs = rf(1000,df1=8,df2=16)
estimates2 = fitFDist(xs,8)
return(estimates2$df2)
})
median(estimates2)
#B
mean((estimates2<20)&(estimates2>12))
summary(estimates2)
boxplot(estimates2)
#Question 6
#A
set.seed(28)
B = 1000
estimates = replicate(B,{
xs = rf(100,df1=8,df2=16)
estimates = fitFDist(xs,8)
return(estimates$df2)
})
median(estimates)
#B
mean((estimates<20)&(estimates>12))
boxplot(estimates)
summary(estimates)
summary(estimates2)
pval_counts = replicate(1000,{
pvals = replicate(30, {
cases = rnorm(5,7.5,2.5)
controls = rnorm(5,7.5,2.5)
t.test(cases,controls)$p.value
})
sum(pvals < 0.05)
})
pvals = replicate(30, {
cases = rnorm(5,7.5,2.5)
controls = rnorm(5,7.5,2.5)
t.test(cases,controls)$p.value
})
#B
ppois(pvals,1,3)
#B
mean(ppois(pvals,1,3))
#B
1-ppois(pvals,1.3)
#B
1-qpois(pvals,1.3)
#B
prob = 1-qpois(pvals,1.3)
#B
prob = 1-qpois(pvals>3,1.3)
prob
sum(prob)
#B
1-ppois(mean(pvals),1.3)
#C
sum(dpois(pvals,30*0.05))
#C
(dpois(pvals,30*0.05))
#C
(ppois(pvals,30*0.05))
#C
sum((ppois(pvals,30*0.05))
#C
Np = 30*0.05
Np = 30*0.05
#B
1-ppois(3,1.3)
tmpfile <- tempfile()
tmpdir <- tempdir()
download.file("http://seanlahman.com/files/database/lahman-csv_2014-02-14.zip",tmpfile)
##this shows us files
filenames <- unzip(tmpfile,list=TRUE)
players <- read.csv(unzip(tmpfile,files="Batting.csv",exdir=tmpdir),as.is=TRUE)
unlink(tmpdir)
file.remove(tmpfile)
#Question 1
library(dplyr)
filter(players,yearID=="2012")%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%select(AVG)
filer(players,yearID=="2012")%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%mutate(AVG=mean(AVG))
filter(players,yearID=="2012")%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%mutate(AVG=mean(AVG))
filter(players,yearID=="2012")%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%select(AVG)
filter(players,yearID=="2012")%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%select(AVG)
#Question 2
filter(players,yearID=="2010","2011","2012")%>%mutate(AVG=H/AB)%>%filter(AB<500)%>%select(AVG)
#Question 2
filter(players,yearID==("2010","2011","2012"))%>%mutate(AVG=H/AB)%>%filter(AB<500)%>%select(AVG)
#Question 2
filter(players,yearID==c(("2010","2011","2012"))%>%mutate(AVG=H/AB)%>%filter(AB<500)%>%select(AVG)
#Question 2
res = unlist(filter(players,yearID==c("2010","2011","2012"))%>%mutate(AVG=H/AB)%>%filter(AB<500)%>%select(AVG))
mean(res)
#Question 2
res = unlist(filter(players,yearID==c("2010","2011","2012"))%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%select(AVG))
mean(res)
#Question 2
res = filter(players,yearID==c("2010","2011","2012"))%>%mutate(AVG=H/AB)%>%filter(AB>=500)%>%select(AVG)
mean(res$AVG)
##Question 3
sd(res)
##Question 3
sd(res$AVG)
#Question 3
qqnorm(res$AVG)
qqline(res$AVG)
#Question 5
sqrt(0.450(1-0.450)/20)
#Question 5
sqrt(0.450*(1-0.450)/20)
BiocManager::install("SpikeInSubset")
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
#These quantities (in PicoMolars) and gene IDs are stored in:
pData(rma95)
#Note quantites same in first and last 3 arrays. define group
g = factor(rep(0:1,each=3))
#create index of which rows are associated with the artifically added genes
spike = rownames(y)%in%colnames(pData(rma95))
#Question 1
library(genefilter)
?rowttests
rowttests(g,spike)
rtt = rowttests(y,g)
index = rtt$p.value<0.01
mean(!spike[index])
#visualize with volcano plot
mask <- with(rtt, abs(dm) < .2 & p.value < .01)
cols <- ifelse(mask,"red",ifelse(spike,"dodgerblue","black"))
with(rtt,plot(-dm, -log10(p.value), cex=.8, pch=16,
xlim=c(-1,1), ylim=c(0,5),
xlab="difference in means",
col=cols))
abline(h=2,v=c(-.2,.2), lty=2)
#Question 2
sds <- rowSds(y[,g==0])
index <- paste0( as.numeric(spike), as.numeric(rtt$p.value<0.01))
index <- factor(index,levels=c("11","01","00","10"),labels=c("TP","FP","TN","FN"))
boxplot(split(sds,index))
#Question 3
#Following 3 steps perform the basic limma analysis:
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
#This step uses hierarchical models that provide a new estimate of the gene specific row:
fit = eBayes(fit)
#New hierarchical model based estimate versus sample based estimate
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
LIM = range( c(posteriorSD,sampleSD))
plot(sampleSD, posteriorSD,ylim=LIM,xlim=LIM)
abline(0,1)
abline(v=sqrt(fit$s2.prior))
#Question 4 compute p values
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
index = pvals < 0.01
mean( !spike[index])
library(genefilter)
library(GSE5859Subset)
data(GSE5859Subset)
g = factor(sampleInfo$group)
results = rowttests(geneExpression,g)
m = nrow(geneExpression)
n = ncol(geneExpression)
randomdata = matrix(rnorm(n*m),m,n)
nullresults = rowttests(randomdata,g)
?vector
#Pvalue histogram -------------------------------------------------------------------
library(rafalib)
mypar(1,2)
hist(nullresults$p.value,ylim=c(0,1400),main="")
hist(results$p.value,ylim=c(0,400),main="")
hist(results$p.value,ylim=c(0,1400),main="")
hist(nullresults$p.value,ylim=c(0,1400),main="")
hist(nullresults$p.value,ylim=c(0,1400),main="")
hist(results$p.value,ylim=c(0,1400),main="")
#Volcano plot(shows effect size)--------------------------------------------------------------------------
plot(results$dm,-log10(results$p.value))
#Volcano plot(shows effect size)--------------------------------------------------------------------------
plot(results$dm,-log10(results$p.value),xlab="Effect size",ylab = "-log base 10 p-values")
#Volcano plot(shows effect size)--------------------------------------------------------------------------
plot(results$dm,-log10(results$p.value),xlab="Effect size",ylab = "-log base 10 p-values")
#Volcano plot(shows effect size)--------------------------------------------------------------------------
mypar(1,1)
plot(results$dm,-log10(results$p.value),xlab="Effect size",ylab = "-log base 10 p-values")
#Boxplots and histograms
library(Biobase)
library(GSE5859Subset)
library(GSE5859)
#Boxplots and histograms
library(Biobase)
library(GSE5859)
install.packages("GSE5859")
library(BiocManager::install("GSE5859"))
library(GSE5859Subset)
data (GSE5859Subset)
ge = exprs(e)
install.packages("GSE5859")
library(BiocManager)
BiocManager::install("GSE5859")
library(SpikeInSubset)
data(mas133)
library(SpikeInSubset)
data(mas133)
#Question 1  make plot of first 2 samples and compute correlation
e <- exprs(mas133)
plot(e[,1],e[,2],main=paste0("corr=",signif(cor(e[,1],e[,2]),3)),cex=0.5)
k <- 3000
b <- 1000 #a buffer
polygon(c(-b,k,k,-b),c(-b,-b,k,k),col="red",density=0,border="red")
length(e[,2][e[,2]<3000][e[,1][e[,1]<3000]])/nrow(e)
#which genes below k for both samples
mean(e[,1]<k & e[,2]<k)
#Question 2
library(rafalib)
mypar(1,2)
plot(log2(e[,1]),log2(e[,2]),main=paste0("corr=",signif(cor(log2(e[,1]),log2(e[,2])),2)),cex=0.5)
k <- log2(3000)
b <- log2(0.5)
polygon(c(b,k,k,b),c(b,b,k,k),col="red",density=0,border="red")
#Question 1  make plot of first 2 samples and compute correlation
e <- exprs(mas133)
plot(e[,1],e[,2],main=paste0("corr=",signif(cor(e[,1],e[,2]),3)),cex=0.5)
k <- 3000 #Defines inside box
b <- 1000 #a buffer
polygon(c(-b,k,k,-b),c(-b,-b,k,k),col="red",density=0,border="red")
#Question 3
e = log2(exprs(mas133))
plot((e[,1]+e[,2])/2,e[,2]-e[-1],cex=0.5)
plot((e[,1]+e[,2])/2,e[,2]-e[,1],cex=0.5)
sd(e[,2]-e[,1])
#Question 4
foldChange = e[,2]-e[,1]
length(foldChange[foldChange < -1]) + length(foldChange[foldChange > 1])
#Question 4
#Fold change of 2 relates to differences of 1(in abs value). Count the occurances:
sum(abs(e[,2]-e[,1])>1)
install.packages("tidyverse")
#Question 2
library(tidyverse)
day21 = ChickWeight%>%filter(Time=="21")
mean(day21$weight)
#B
sd(day21$weight)
#A
x = mean(day21$weight)
#B
y = sd(day21$weight)
#C
x/(x+y)
#C
qqplot(day21$weight)
#C
qqnorm(day21$weight)
qqline(day21$weight)
#C
Beta = (x/(x+y))
#C
Beta = (x/(x+y))
ans = length(day21)*(x,y^2)
ans = Beta*x +(1-Beta)*x
#Question 3
a = day21$Diet=="3"
#Question 3
library(dpylr)
#Question 3
library(dplyr)
a = filter(day21$weight & day21$Diet)
a = filter(day21$Diet=="3")%>%select(day21$weight)
View(day21)
a = filter(day21$Diet==3)%>%select(day21$weight)
a = unlist(filter(day21$Diet=="3")%>%select(day21$weight))
a = filter(day21$weight)%>%select(day21$Diet=="3")
a = day21$Diet=="3"
b = day21$weight[27:36,]
a = day21%>%filter(Day=="3")
a = day21%>%filter(Diet=="3")
View(a)
b = mean(a$weight)
#B
c = sd(a)
#B
c = sd(a$weight)
c
graph = qqnorm(day21$weight)
graph = qqnorm(day21$weight)
qqline(day21$weight)
gradient(day21$weight,1)
#Question 4
#A
exptweight = c^2/(c^2+y^2)
exptweight
#Question 4
#A
Beta = c^2/(c^2+y^2)
exptweight = Beta(x)+(1-Beta)*b
#Question 4
#A
Beta = c^2/(c^2+y^2)
exptweight = Beta(x)+(1-Beta)*b
#Question 4
#A
Betas = c^2/(c^2+y^2)
exptweight = Betas(x)+(1-Betas)*b
exptweight = Betas*(x)+(1-Betas)*b
exptweight
#B
SE = sqrt(1/(1/(c^2)+1/y^2))
SE
exptweight/SE
#Question 5
library(genefilter)
#Setup 6 - 8
load("bottomly_eset.RData")
library(Biobase)
library(genefilter)
library(qvalue)
dat = exprs(bottomly.eset)    # gene expression matrix
strain = pData(bottomly.eset)$strain    # strain factor
results <- rowttests(dat,strain)
pvals <- results$p.value
set.seed(1)
permut = sample(strain)
sum(permut$p.value<0.05)
rowttests(permut)$p.value
?rowttests()
?`rowttests
?rowttests
rowttests(permut,dat)$p.value
rowttests(permut,strain)$p.value
rowtt = rowttests(dat,permut)
rowtt$p.value<0.05
sum(rowtt$p.value<0.05)
rowtt = rowttests(dat,permut)$p.value
rowtt<0.05
set.seed(1)
permut = sample(strain)
rowtt = rowttests(dat,permut)$p.value
sum(rowtt<0.05)
rowtt = rowttests(dat,strain)$p.value
sum(rowtt<0.05)
rowtt = rowttests(dat,permut)$p.value
sum(rowtt<0.05)
view(rowtt)
rowtt<0.05
sum(rowtt<0.05)
#Setup 6 - 8
load("bottomly_eset.RData")
library(Biobase)
library(genefilter)
library(qvalue)
dat = exprs(bottomly.eset)    # gene expression matrix
strain = pData(bottomly.eset)$strain    # strain factor
results <- rowttests(dat,strain)
pvals <- results$p.value
set.seed(1)
permut = sample(strain)
rowtt = rowttests(dat,permut)$p.value
sum(rowtt<0.05)
rowtt = na.omit(rowtt)
sum(rowtt<0.05)
#Question 7
hist(pvals)
#Question 7
library(rafalib)
hist(pvals)
hist(permut)
hist(rowtt)
hist(pvals)
graph = qqnorm(day21$weight)
qqline(day21$weight)
#C
dnorm(x,y)
#A
x = mean(day21$weight)
#B
y = sd(day21$weight)
#C
dnorm(x,y)
#C
pnorm(x,y)
#C
pnorm(day21$weight)
#C
dnorm(day21$weight,0,1)
#C
dnorm(day21$weight)
#C
sum(dnorm(day21$weight))
#C
sum(length(dnorm(day21$weight)))
#C
dbinom(day21$weight)
#C
graph = qqnorm(day21$weight)
qqline(day21$weight)
mod(qqline(day21$weight))
coef(qqline(day21$weight))
#C
fit = lm(x~y)
slope = coef(fit)[2]
graph = qqnorm(day21$weight)
qqline(day21$weight)
#C
1 - pnorm(300,x,y)
#C
1 - pnorm(300,x,y)
#A
x = mean(day21$weight)
#B
y = sd(day21$weight)
#C
1 - pnorm(300,x,y)
day21 = ChickWeight%>%filter(Time=="21")
#A
x = mean(day21$weight)
#B
y = sd(day21$weight)
#C
1 - pnorm(300,x,y)
#C
1 - pnorm(300,270.3,71.62254)
#Question 2
library(tidyverse)
day21 = ChickWeight%>%filter(Time=="21")
#A
x = mean(day21$weight)
#B
y = sd(day21$weight)
#C
1 - pnorm(300,270.3,71.62254)
#Question 3
library(dplyr)
#A
a = day21%>%filter(Diet=="3")
b = mean(a$weight)
#B
c = sd(a$weight)
#A
a = day21%>%filter(Diet=="3")
b = mean(a$weight)
#B
c = sd(a$weight)
#C
1-pnorm(300,b,c)
#C
1-pnorm(x,y)
#C
1-pnorm(300,x,y)
