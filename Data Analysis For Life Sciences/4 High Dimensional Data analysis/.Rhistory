sum(result)
sum(result!=leukTF[fold_ind])
#Question 6
leukTF = leuk == "NoL"
library(caret)
set.seed(2)
idx = createFolds(leukTF,k=5)
library(dslabs)
data(heights)
head(heights)
heights$height = round(heights$height)
y = heights$sex =="Female"
x = mean(y[heights$height=="67"])
hts = c(60:80)
pr = sapply(hts,function(x0)mean(y[heights$height==x0]))
plot(hts,pr)
abline(h=0.5) #above half
abline(v=64) #the exact hit
#Assignment setup
library(BiocManager)
BiocManager::install("leukemiasEset")
library(leukemiasEset)
data(leukemiasEset)
dat = exprs(leukemiasEset)
leuk = leukemiasEset$LeukemiaType
#Question 1
#A and #B
dim(dat)
#C
sum(leuk=="AML")
#Question 2
d = dist(t(dat))
mds = cmdscale(d)
plot(mds[,1],mds[,2],bg=as.numeric(leuk),pch=21)
legend("bottomright",levels(leuk),col=seq(along=levels(leuk)),pch=15)
#Question 3
hc = hclust(d)
plot(hc,label=leuk)
table(cutree(hc,h=150))
#Question 5
library(matrixStats)
library(gplots)
library(RColorBrewer)
cols = colorRampPalette(rev(brewer.pal(11,"RdBu")))(25)
gcol=brewer.pal(5,"Dark2")
gcol=gcol[as.numeric(leuk)]
sds = rowMads(dat)
fold_ind = order(sds,decreasing=TRUE)[1:25]
heatmap.2(dat[fold_ind,],
trace="none",
scale = "row",
key = FALSE,
ColSideColors = gcol,
labCol = leuk,
col = cols)
#Question 6
leukTF = leuk == "NoL"
library(caret)
set.seed(2)
idx = createFolds(leukTF,k=5)
#A and #B
sapply(idx,function(fold_ind)table(leukTF[fold_ind]))
#OR
#A
idx = createFolds(leukTF, k=5)
normal_counts = sapply(1:length(idx), function(x){
fold_fold_ind = idx[[x]]
sum(leukTF[fold_fold_ind]==TRUE)
})
sum(normal_counts > 0)
#B
sum(normal_counts==3)
#Question 7
library(genefilter)
m = 3
fold_ind = idx[[1]]
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
gene_ind
#Question 8
library(class)
# use gene_fold_ind and fold_fold_ind to define training and test sets and training classes
train_set = t(dat[gene_ind, -fold_ind])
test_set = t(dat[gene_ind,fold_ind])
train_classes = leukTF[-fold_ind]
# set k=number of nearest neighbors
k = 5
# run knn
pred = knn(train_set, test_set, train_classes, k)
# count the number of errors
sum(pred!=leukTF[fold_ind])
#Question 9
#A
result = sapply(idx,function(fold_ind){
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
train_set = t(dat[gene_ind, -fold_ind])
test_set = t(dat[gene_ind,fold_ind])
train_classes = leukTF[-fold_ind]
pred = knn(train_set, test_set, train_classes, k)
sum(pred!=leukTF[fold_ind])
})
sum(result!=leukTF[fold_ind])
#B
mean(result)
#C
1- sum(result)/length(leukTF)
sum(result)
sum(result)
#B
mean(result)
#C
1- 5/length(leukTF)
#C
1- (5/length(leukTF))
#C
1- (sum(results)/length(leukTF))
#C
1- (sum(result)/length(leukTF))
#Question 9
#A
result = sapply(idx,function(fold_ind){
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
pred = knn(train_set, test_set, train_classes, k)
sum(pred!=leukTF[fold_ind])
})
sum(result)
#B
mean(result)
#C
1- (sum(result)/length(leukTF))
#B
mean(result/length(leukTF))
#C
1- (sum(result)/length(leukTF))
#Question 7
library(genefilter)
m = 3
fold_ind = idx[[1]]
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
gene_ind
#Question 6
leukTF = leuk == "NoL"
library(caret)
set.seed(2)
idx = createFolds(leukTF,k=5)
#A and #B
sapply(idx,function(fold_ind)table(leukTF[fold_ind]))
normal_counts = sapply(1:length(idx), function(x){
fold_fold_ind = idx[[x]]
sum(leukTF[fold_fold_ind]==TRUE)
})
sum(normal_counts > 0)
#B
sum(normal_counts==3)
#Question 7
library(genefilter)
m = 3
fold_ind = idx[[1]]
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
gene_ind
#Question 8
library(class)
# use gene_fold_ind and fold_fold_ind to define training and test sets and training classes
train_set = t(dat[gene_ind, -fold_ind])
test_set = t(dat[gene_ind,fold_ind])
train_classes = leukTF[-fold_ind]
# set k=number of nearest neighbors
k = 5
# run knn
pred = knn(train_set, test_set, train_classes, k)
# count the number of errors
sum(pred!=leukTF[fold_ind])
#Question 9
#A
result = sapply(idx,function(fold_ind){
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
pred = knn(train_set, test_set, train_classes, k=k)
sum(pred!=leukTF[fold_ind])
})
sum(result)
#B
mean(result/length(leukTF))
#C
1- (sum(result)/length(leukTF))
#B
mean(result)
#Question 9
#A
result = sapply(1:length(idx),function(x){
fold_ind=idx[[x]]
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
pred = knn(train_set, test_set, train_classes, k=k)
sum(pred!=leukTF[fold_ind])
})
sum(result)
#Question 9
#A
result = sapply(1:length(idx),function(x){
fold_ind=idx[[x]]
pvals = rowttests(dat[,-fold_ind],factor(leukTF[-fold_ind]))$p.val
gene_ind = order(pvals)[1:m]
train_set = t(dat[gene_ind, -fold_ind])
test_set = t(dat[gene_ind,fold_ind])
train_classes = leukTF[-fold_ind]
pred = knn(train_set, test_set, train_classes, k=k)
sum(pred!=leukTF[fold_ind])
})
sum(result)
#B
mean(result)
#B
mean(result)/length(leukTF)
#C
1- (sum(result)/length(leukTF))
library(dagdata)
data(admissions)
print(admissions)
#Question 1 proportion of men accepted
index = which(admissions$Gender==1)
accepted= sum(admissions$Number[index] * admissions$Percent[index]/100)
applied = sum(admissions$Number[index])
accepted/applied
#Women accepted
index = which(admissions$Gender==0)
accepted= sum(admissions$Number[index] * admissions$Percent[index]/100)
applied = sum(admissions$Number[index])
accepted/applied
#Question 2 chi-square independance test for p-value
index=admissions$Gender==1
men = admissions[index,]
women=admissions[!index,]
menYes = sum(men$Number*men$Percent/100)
menNo = sum(men$Number*(1-men$Percent/100))
womenYes = sum(women$Major*women$Percent/100)
womenYes = sum(women$Number*women$Percent/100)
womenNo = sum(women$Number*(1-women$Percent/100))
tab = matrix(c(menYes,womenYes,menNo,womenNo),2,2)
chisq.test(tab)$p.value
men = admissions[index,]
women = admissions[!index,]
print( data.frame( major=admissions[1:6,1],men=men[,3], women=women[,3]) )
#Question 3 hardest major
major = admissions[1:6,1]
men = admissions[1:6]
men = admissions[1:6,]
women = admissions[7:12,]
H = (men$Number*men$Percent/100 + women$Number*women$Percent/100)/(men$Number+women$Number)
major[which.min(H)]
#Question 4 proportion students admitted to F major
min(H)
#Question 5
cor(H,men$Number)
#Question 6
cor(H,women$Number)
library(Biobase)
library(GSE5859)
library(devtools)
install_github("genomicsclass/GSE5859")
#extract gene expression data
geneExpression = exprs(e)
library(GSE5859)
#extract gene expression data
geneExpression = exprs(e)
data(GSE5859)
#extract gene expression data
geneExpression = exprs(e)
#extract sample info
sampleInfo = pData(e)
#These are bioconductor functions
table(sampleInfo)
View(sampleInfo)
#Exercise 1
tab = table(year,sampleInfo$ethnicity)
#Exercise 1
#Extract year from each date:
year = format(sampleInfo$date,"%y")
tab = table(year,sampleInfo$ethnicity)
x = rowSums(tab!=0)
sum(x>=2)
#Exercise 2
#Extract month:
month.year = format(sampleInfo$date,"%m%y")
tab = table(month.year,sampleInfo$ethnicity)
x = rowSums(tab!=0)
mean(x>=2)
#Exercise 3
library(genefilter)
index = which(year%in%c("02","03")&sampleInfo$ethnicity=="CEU")
year = droplevels(year[index])
year = droplevels(as.numeric(year[index]))
year = as.numeric(year)
year = droplevels(year[index])
index = which(year%in%c("02","03")&sampleInfo$ethnicity=="CEU")
year = as.numeric(year)
year = droplevels(year[index])
#Exercise 1 #For how many years more than one ethnicity rep
#Extract year from each date:
year = format(sampleInfo$date,"%y")
index = which(year%in%c("02","03")&sampleInfo$ethnicity=="CEU")
year = droplevels(year[index])
pval = rowttests(geneExpression[,index],year)$p.value
library(qvalue)
year = droplevels(year[index])
year = factor(format(sampleInfo$date,"%y"))
index = which(year%in%c("02","03")&sampleInfo$ethnicity=="CEU")
year = droplevels(year[index])
pval = rowttests(geneExpression[,index],year)$p.value
qval = qvalue(pval)
sum(qval<0.05)
sum(qval$qvalues<0.05)
qval$pi0
#Exercise 4 CEU samples processed in 2003 to 2004
year = factor(format(sampleInfo$date,"%y"))
index = which(year%in%c("03","04")&sampleInfo$ethnicity=="CEU")
year = droplevels(year[index])
pval = rowttests(geneExpression[,index],year)$p.value
qval = qvalue(pval)
sum(qval$qvalues<0.05)
#Exercise 5 CEU vs ASN
index = which(sampleInfo$ethnicity%in%c("CEU","ASN"))
g = droplevels(sampleInfo$ethnicity[index])
pval = rowttests(geneExpression[,index],g)$p.value
qval = qvalue(pval)
sum(qval$qvalues<0.05)
#Exercise 6 only for samples processed in 2005(two groups represented here)
index = which(sampleInfo$ethnicity%in%c("CEU","ASN")&year=="05")
g = droplevels(sampleInfo$ethnicity[index])
pval = rowttests(geneExpression[,index],g)$p.value
#Exercise 6 only for samples processed in 2005(two groups represented here)
year = factor(format(sampleInfo$date,"%y"))
index = which(sampleInfo$ethnicity%in%c("CEU","ASN")&year=="05")
g = droplevels(sampleInfo$ethnicity[index])
pval = rowttests(geneExpression[,index],g)$p.value
qval = qvalue(pval)
sum(qval$qvalues<0.05)
#Exercise 7 3 random CEU samples from 2002 vs ASN from 2005
year = factor(format(sampleInfo$date,"%y"))
indexOne = which(sampleInfo$ethnicity=="ASN" & year == "2005")
set.seed(3)
indexASN = which(sampleInfo$ethnicity=="ASN" & year == "2005")
set.seed(3)
indexCEU = sample(which(sampleInfo$ethnicity=="CEU" & year == "2002"),3)
indexASN = which(sampleInfo$ethnicity=="ASN" & year == "05")
set.seed(3)
indexCEU = sample(which(sampleInfo$ethnicity=="CEU" & year == "2002"),3)
indexCEU = sample(which(sampleInfo$ethnicity=="CEU" & year == "02"),3)
index = c(indexASN,indexCEU)
g = droplevels(sampleInfo$ethnicity[index])
pval = rowttests(geneExpression[,index],g)$p.value
qval = qvalue(pval)
sum(qval$qvalues<0.05)
library(GSE5859Subset)
data(GSE5859Subset)
#purposely confound month and sex but not completely:
sex = sampleInfo$group
month = factor(format(sampleInfo$date,"%m"))
table(sampleInfo$group,month)
#Question 1 compare the 2 groups and find qvalue <0.1
library(qvalue)
library(genefilt)
library(genefilter)
pvals = rowttests(geneExpression,factor(sampleInfo$group))$p.value
qvals = qvalue(pvals)
sum(qvals<0.1)
sum(qvals$qvalues<0.1)
#Question 2 evaluate false and true positives with experimental data
#Here, evaluate results using the proportion genes on the list that are on ChrX or ChrY
index = geneAnnotation$CHR[qvals$qvalues<0.1]%in%c("chrX","chrY")
mean(index)
View(geneAnnotation)
#Question 3 for autosomal genes for which qval<0.1, compare samples processed in june to october
index = which(qvals$qvalues<0.1) & !geneAnnotation$CHR%in%c("chrX","chrY")
#Question 3 for autosomal genes for which qval<0.1, compare samples processed in june to october
index = which(qvals$qvalues<0.1 & !geneAnnotation$CHR%in%c("chrX","chrY"))
month = factor(format(sampleInfo$date,"%m"))
pvals = rowttest(geneExpression[index,],month)$p.value
pvals = rowttests(geneExpression[index,],month)$p.value
mean(pvals<0.05)
#Question 4
X = model.matrix(~sex+month)
pvals = sapply(1:nrow(geneExpression),function(i){
y = geneExpression[i,]
fit = lm(y~X-1)
summary(fit)$coef[2,4]
})
qvals = qvalue(pvals)$qvalue
sum(qvals<0.01)
sum(qvals<0.1)
#Question 6 proportion on chrX and chrY
index = geneAnnotation$CHR[qvals<0.1]%in%c("chrX","chrY")
mean(index)
#Question 7 from lm in q6, extract pvalues related to coefficients for obc vs june differences
#using same LM
pvals = sapply(1:nrow(geneExpression),function(i){
y = geneExpression[i,]
fit = lm(y~X)
summary(fit)$coef[3,4]
})
qvals = qvalue(pvals)$qvalue
sum(qvals<0.1)
library(Biobase)
library(GSE5859Subset)
data(GSE5859Subset)
y = geneExpression - rowMeans(geneExpression)
library(rafalib)
mypar(1,1)
mypar(1,2)
sex = sampleInfo$group
cors = cor(y)
image(cors)
o = order(sampleInfo$date)
image(cors[o,o])
#Question 2 use PCA to estimate the 2 factors we believe are present from q1
pcs = svd(y)$v[,1:2]
#Question 3
for(i in 1:2){
plot(pcs[o,i],col=cols,xaxt="n",xlab="")
label = gsub("2005-","",sampleInfo$date[o])
axis(1,1:ncol(y),label,las=2)
}
#Question 3
cols = as.numeric(month)[o]
#Question 3
month = factor(format(sampleInfo$date,"%m"))
cols = as.numeric(month)[o]
for(i in 1:2){
plot(pcs[o,i],col=cols,xaxt="n",xlab="")
label = gsub("2005-","",sampleInfo$date[o])
axis(1,1:ncol(y),label,las=2)
}
#Question 4 use svd to obtain principal components(PCs) for detrended gene expression data y
#and find PCs explain more than 10% each of the variability
s = svd(y)
variability = s$d^2/sum(s$d^2)
sum(variability>0.10)
#Question 5
#A which pc most correlates (negative or positive correlation) with month
cors = cor(as.numeric(month),s$v)
which.max(cors)
#B cor in abs value
max(abs(cors))
#Question 6 with sex
cors = cor(as.numeric(sex),s$v)
which.max(sex)
max(abs(sex))
which.max(cors)
max(abs(cors))
#Question 7 add the two estimated factors in Q6 to the LM:
X = model.matrix(~sex+s$v[,1:2])
y = geneExpression[i,]
pvals = sapply(1:nrow(geneExpression),function(i){
y = geneExpression[i,]
fit = lm(y~X-1)
summary(fit)$coef[2,4]
})
library(qvalue)
qvals = qvalue(pvals)
sum(qvals$qvalues<0.1)
#Proportion of the genes on chrX and chrY
index = geneAnnotation$CHR[qvals<0.1]%in%c("chrX","chrY")
#Proportion of the genes on chrX and chrY
index = geneAnnotation$CHR[qvals$qvalues<0.1]%in%c("chrX","chrY")
mean(index)
library(sva)
install.packages("sva")
library("BiocManager", lib.loc="~/R/win-library/3.6")
BiocManager::install("sva")
library(sva)
library(Biobase)
library(GSE5859Subset)
data(GSE5859Subset)
#First factor correlated with outcome of interest
s = svd(geneExpression- rowMeans(geneExpression))
cor(sampleInfo$group,s$v[,1])
#Use SVA to estimate the effects of finding genes that are differentially expressed
#While using factor analysis approach to account for batch effects
#svafit() estimates factors but downweighting the genes that appear to correlate with the outcome
#of interest
#It also tries to estimate the number of factors and returns the estimated factors like:
sex = sampleInfo$group
mod = model.matrix(sex)
mod = model.matrix(~sex)
svafit = sva(geneExpression,mod)
head(svafit$sv)
#Note resulting estimated factors are not tat different from principal component(PCs):
for(i in 1:ncol(svafit$sv)){
print( cor(s$v[,i],svafit$sv[,i]) )
}
#Question 1 fit a LM to estimate the difference between male and females for each gene
#but instead of accounting for batch effects using month,, it includes the
#factors estimated by sva in the model.
library(qvalue)
X = model.matrix(~sex+svafit$sv)
y = geneExpression[i,]
pvals = sapply(1:nrow(geneExpression),function(i){
y = geneExpression[i,]
fit = lm(y~X-1)
summary(fit)$coef[2,4]
})
qvals = qvalue(pvals)
sum(qvals$qvalues<0.1)
#Question 2 proportion of genes from Q1 are from chrY and chrX
index = geneAnnotation[qvals$qvalues<0.1]%in%c("chrX","chrY")
#Question 2 proportion of genes from Q1 are from chrY and chrX
index = geneAnnotation$CHR[qvals$qvalues<0.1]%in%c("chrX","chrY")
mean(index)
