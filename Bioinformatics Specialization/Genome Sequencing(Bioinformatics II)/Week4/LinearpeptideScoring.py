from collections import Counter

amino_acid_mass = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99,
                   'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114,
                   'D': 115, 'K': 128, 'Q': 128, 'E': 129, 'M': 131,
                   'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186}


def LinearpeptideScore(peptide, spectrum):
    # Counter returns a dictionary

    theoretical_spectrum = LinearSpectrum(peptide, amino_acid_mass)
    theoretical_counter = Counter(theoretical_spectrum)
    experimental_counter = Counter(spectrum)
    common_counter = theoretical_counter & experimental_counter
    # since Counter returns a dictionary we may add up the occurrences of the theoretical and experimental spectra values
    return sum(common_counter.values())


def LinearSpectrum(Peptide, AminoAcidMass):
    PrefixMass = [0]
    for aminoacid in Peptide:
        PrefixMass.append(PrefixMass[-1] + AminoAcidMass[aminoacid])

    LSpectrum = [0]
    for i in range(len(Peptide)):
        for j in range(i+1, len(Peptide)+1):
            LSpectrum.append(PrefixMass[j] - PrefixMass[i])

    return sorted(LSpectrum)


peptide = "GKQHSKCWCVAAGYETIQRYLMLEAGVRKWARTLHCMPIWEQHP"
spectrum = [int(x) for x in "0 57 57 57 71 71 71 71 87 97 97 97 99 99 101 101 113 113 113 113 113 113 128 128 128 128 128 128 128 128 129 129 129 129 131 137 137 137 142 156 156 156 156 163 163 163 170 184 185 186 186 186 199 200 210 210 214 214 215 220 224 226 227 227 228 228 230 234 241 241 242 250 255 256 257 257 257 259 265 265 265 269 276 283 284 291 292 292 297 298 299 312 313 313 314 315 319 323 328 339 340 342 343 349 349 351 352 352 356 356 362 362 368 370 370 370 372 373 378 382 383 393 393 394 396 397 401 410 414 414 420 420 425 427 432 441 441 446 447 450 450 452 453 453 461 467 469 471 478 479 480 480 481 485 486 491 491 493 496 498 500 501 506 507 509 512 521 523 529 537 538 538 542 552 554 554 556 557 560 560 563 566 575 577 578 580 587 590 590 592 600 606 606 608 609 609 609 610 613 615 625 625 627 629 634 634 635 642 654 657 661 665 666 667 671 673 679 679 680 686 691 691 691 703 705 705 706 706 707 708 710 716 719 722 724 728 738 738 742 743 743 762 765 766 770 770 771 774 776 790 790 792 794 799 799 804 804 809 809 815 819 820 823 833 834 834 835 835 836 837 840 840 842 842 842 847 851 851 852 853 863 866 870 871 883 886 893 899 899 903 905 918 922 922 927 932 932 933 934 937 937 948 948 950 952 953 955 957 960 962 962 965 970 971 971 979 980 981 984 989 998 998 1000 1006 1010 1012 1014 1019 1023 1027 1037 1047 1049 1050 1056 1059 1061 1061 1063 1066 1066 1068 1078 1080 1081 1083 1084 1088 1088 1090 1091 1094 1099 1099 1109 1111 1113 1113 1116 1119 1120 1123 1126 1132 1140 1151 1151 1152 1154 1160 1163 1166 1175 1177 1179 1179 1184 1185 1187 1187 1192 1194 1196 1208 1212 1212 1217 1219 1219 1220 1222 1224 1233 1236 1239 1241 1242 1244 1247 1251 1265 1265 1267 1276 1276 1279 1279 1282 1283 1288 1291 1292 1295 1305 1306 1313 1313 1314 1315 1316 1316 1318 1320 1333 1333 1336 1340 1341 1346 1349 1350 1362 1364 1370 1375 1380 1380 1389 1389 1395 1395 1396 1403 1404 1405 1407 1407 1407 1412 1415 1429 1433 1433 1442 1443 1444 1446 1446 1450 1451 1451 1461 1462 1464 1469 1469 1472 1475 1476 1493 1496 1502 1502 1508 1508 1509 1520 1525 1526 1533 1533 1533 1540 1543 1544 1547 1552 1557 1561 1566 1570 1571 1574 1575 1579 1589 1590 1590 1601 1604 1604 1606 1607 1609 1621 1625 1627 1632 1638 1639 1648 1653 1654 1657 1658 1661 1665 1665 1672 1672 1675 1677 1679 1688 1689 1692 1699 1703 1703 1703 1708 1717 1722 1729 1732 1735 1738 1752 1756 1760 1764 1766 1767 1774 1774 1776 1785 1785 1785 1785 1788 1790 1793 1794 1800 1802 1804 1821 1821 1831 1831 1832 1836 1845 1848 1851 1857 1858 1865 1880 1882 1887 1889 1892 1893 1898 1901 1903 1903 1913 1913 1916 1922 1922 1930 1930 1941 1949 1949 1949 1950 1958 1958 1960 1962 1967 1970 1971 1987 1993 1995 2000 2014 2018 2021 2021 2021 2029 2041 2050 2059 2059 2061 2062 2068 2069 2071 2075 2078 2078 2080 2085 2086 2086 2086 2089 2090 2098 2100 2104 2134 2142 2142 2146 2149 2150 2156 2158 2158 2163 2177 2179 2181 2197 2199 2199 2203 2204 2213 2213 2214 2215 2215 2217 2217 2231 2232 2241 2245 2254 2255 2263 2275 2278 2284 2286 2290 2292 2298 2300 2312 2312 2314 2314 2327 2328 2332 2332 2342 2344 2344 2345 2345 2360 2360 2369 2383 2383 2391 2399 2401 2403 2415 2417 2419 2427 2428 2429 2431 2440 2441 2442 2442 2455 2458 2460 2470 2473 2473 2488 2490 2500 2507 2512 2512 2512 2514 2528 2530 2539 2541 2547 2555 2555 2556 2557 2559 2559 2570 2583 2587 2592 2601 2625 2625 2627 2627 2627 2628 2636 2640 2646 2649 2654 2656 2663 2668 2683 2684 2684 2688 2698 2700 2715 2720 2720 2722 2738 2740 2741 2753 2755 2764 2769 2777 2783 2785 2791 2791 2792 2802 2812 2812 2813 2828 2835 2842 2848 2851 2854 2869 2882 2883 2884 2890 2901 2904 2908 2911 2915 2919 2920 2920 2939 2940 2940 2941 2948 2955 2971 2979 2997 2998 3005 3005 3012 3018 3019 3028 3033 3039 3040 3048 3050 3052 3057 3067 3068 3076 3096 3099 3134 3134 3134 3141 3147 3147 3149 3154 3161 3165 3168 3180 3185 3191 3195 3205 3236 3246 3252 3254 3255 3262 3262 3263 3269 3278 3282 3293 3297 3298 3308 3333 3333 3354 3356 3364 3365 3375 3382 3391 3391 3392 3395 3399 3421 3425 3426 3432 3464 3469 3478 3483 3492 3493 3496 3496 3519 3519 3520 3528 3549 3554 3554 3561 3561 3595 3606 3606 3611 3621 3625 3625 3647 3648 3650 3682 3691 3705 3724 3724 3734 3734 3743 3747 3747 3748 3749 3753 3778 3788 3806 3819 3845 3852 3853 3862 3865 3871 3871 3875 3890 3910 3916 3919 3933 3962 3981 3987 3989 3999 3999 4002 4039 4056 4061 4086 4096 4099 4118 4127 4130 4148 4167 4184 4215 4224 4225 4227 4258 4285 4304 4311 4315 4353 4353 4355 4401 4412 4413 4440 4448 4481 4490 4541 4568 4576 4577 4587 4598 4618 4704 4705 4705 4705 4715 4761 4802 4833 4833 4842 4890 4939 4961 4970 5018 5067 5098 5155 5195 5252".split()]

print(LinearpeptideScore(peptide, spectrum))

if __name__ == "__main__":
    LinearpeptideScore(peptide, spectrum)
