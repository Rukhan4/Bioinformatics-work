# Cyclopeptide Scoring - Computes the score of a cyclic peptide against a spectrum -- that is,
# relays the amount of column matches between the theoretical and experimental spectra

from collections import Counter

amino_acid_mass = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99,
                   'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114,
                   'D': 115, 'K': 128, 'Q': 128, 'E': 129, 'M': 131,
                   'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186}


def CyclopeptideScore(peptide, spectrum):
    # Counter returns a dictionary

    theoretical_spectrum = CycloSpectrum(peptide)
    theoretical_counter = Counter(theoretical_spectrum)
    experimental_counter = Counter(spectrum)
    common_counter = theoretical_counter & experimental_counter
    # since Counter returns a dictionary we may add up the occurrences of the theoretical and experimental spectra values
    return sum(common_counter.values())


def CycloSpectrum(peptide):
    prefix_mass = [0]
    for amino_acid in peptide:
        prefix_mass.append(prefix_mass[-1] + amino_acid_mass[amino_acid])

    peptide_mass = prefix_mass[-1]
    spectrum = [0]  # Instantiated with 0
    for i in range(len(peptide)):
        for j in range(1, len(peptide)+1):
            if i == j:
                continue
            elif j > i:
                spectrum.append(prefix_mass[j] - prefix_mass[i])
            else:
                spectrum.append(peptide_mass + prefix_mass[j] - prefix_mass[i])
    return sorted(spectrum)


peptide = "KFDKMIPMRHHCWPMSVSDFPAHKNRDINRGTVRHH"
spectrum = "0 57 87 87 87 97 97 97 99 101 103 113 114 114 115 115 115 128 128 128 128 131 131 131 137 137 137 137 147 147 156 156 156 156 156 158 163 186 200 202 202 210 213 215 215 218 218 227 228 228 240 242 244 244 253 257 262 262 265 265 270 270 270 271 271 274 275 283 287 289 291 293 293 300 302 314 315 327 328 330 331 333 341 341 346 349 349 359 377 379 384 385 385 385 386 390 390 390 398 400 412 413 414 417 421 424 426 426 427 428 428 428 428 430 433 443 446 446 472 477 477 480 483 491 497 501 513 515 517 518 521 523 527 527 527 530 533 535 535 537 541 541 541 541 543 548 548 556 559 561 563 564 574 575 584 593 598 602 604 608 614 628 628 629 632 634 645 650 652 654 655 655 655 658 660 661 664 665 669 674 683 685 690 690 691 695 697 699 703 704 715 716 719 721 730 732 739 741 745 754 756 761 765 771 777 779 780 783 788 791 792 792 798 802 806 806 811 811 813 816 817 818 818 818 819 821 830 831 841 850 852 855 858 867 867 868 869 874 878 889 894 902 903 903 905 908 917 920 926 934 935 939 947 947 947 948 949 954 954 955 955 956 960 962 967 969 969 974 977 978 981 989 995 996 1004 1005 1006 1018 1021 1034 1036 1044 1045 1050 1050 1059 1060 1068 1071 1075 1075 1076 1076 1078 1081 1082 1082 1083 1085 1086 1089 1092 1093 1097 1104 1105 1105 1109 1111 1114 1116 1118 1133 1135 1137 1149 1157 1162 1162 1165 1165 1173 1175 1178 1182 1191 1196 1196 1196 1206 1207 1208 1213 1218 1226 1230 1231 1231 1232 1234 1236 1239 1242 1242 1245 1246 1248 1249 1249 1251 1252 1262 1265 1278 1288 1288 1289 1293 1293 1310 1315 1318 1320 1321 1324 1327 1329 1333 1334 1345 1345 1349 1352 1354 1354 1355 1359 1364 1368 1375 1375 1377 1379 1379 1380 1380 1382 1386 1386 1390 1390 1393 1405 1406 1408 1419 1424 1432 1435 1446 1449 1452 1461 1467 1471 1471 1476 1476 1477 1482 1483 1487 1487 1489 1490 1495 1496 1496 1501 1501 1503 1503 1506 1506 1510 1511 1516 1522 1533 1533 1536 1540 1542 1562 1563 1577 1580 1586 1588 1590 1591 1592 1593 1598 1599 1608 1608 1608 1610 1616 1617 1619 1621 1623 1624 1624 1624 1632 1634 1634 1634 1637 1642 1648 1650 1657 1659 1668 1670 1676 1678 1679 1695 1703 1705 1708 1713 1714 1719 1721 1721 1733 1733 1735 1736 1737 1739 1739 1745 1749 1752 1754 1761 1764 1765 1766 1768 1769 1771 1772 1773 1780 1782 1790 1790 1805 1806 1807 1808 1832 1834 1836 1836 1836 1836 1848 1850 1851 1852 1855 1859 1861 1863 1868 1869 1870 1873 1877 1881 1886 1889 1893 1895 1896 1899 1901 1902 1904 1906 1910 1917 1923 1923 1927 1929 1935 1946 1947 1949 1950 1964 1965 1968 1973 1976 1983 1983 1983 1984 1987 1990 1992 2006 2007 2009 2014 2014 2024 2024 2029 2032 2033 2036 2037 2038 2044 2045 2051 2060 2060 2063 2063 2064 2065 2070 2070 2080 2081 2083 2096 2101 2103 2104 2105 2110 2111 2120 2121 2121 2129 2139 2140 2142 2143 2143 2150 2151 2151 2160 2161 2167 2167 2175 2178 2182 2185 2185 2191 2192 2193 2195 2196 2197 2198 2200 2216 2217 2220 2226 2232 2236 2238 2242 2248 2254 2257 2258 2274 2276 2277 2278 2279 2281 2282 2283 2289 2289 2292 2296 2299 2307 2307 2313 2314 2323 2323 2324 2331 2331 2332 2334 2335 2345 2353 2353 2354 2363 2364 2369 2370 2371 2373 2378 2391 2393 2394 2404 2404 2409 2410 2411 2411 2414 2414 2423 2429 2430 2436 2437 2438 2441 2442 2445 2450 2450 2460 2460 2465 2467 2468 2482 2484 2487 2490 2491 2491 2491 2498 2501 2506 2509 2510 2524 2525 2527 2528 2539 2545 2547 2551 2551 2557 2564 2568 2570 2572 2573 2575 2578 2579 2581 2585 2588 2593 2597 2601 2604 2605 2606 2611 2613 2615 2619 2622 2623 2624 2626 2638 2638 2638 2638 2640 2642 2666 2667 2668 2669 2684 2684 2692 2694 2701 2702 2703 2705 2706 2708 2709 2710 2713 2720 2722 2725 2729 2735 2735 2737 2738 2739 2741 2741 2753 2753 2755 2760 2761 2766 2769 2771 2779 2795 2796 2798 2804 2806 2815 2817 2824 2826 2832 2837 2840 2840 2840 2842 2850 2850 2850 2851 2853 2855 2857 2858 2864 2866 2866 2866 2875 2876 2881 2882 2883 2884 2886 2888 2894 2897 2911 2912 2932 2934 2938 2941 2941 2952 2958 2963 2964 2968 2968 2971 2971 2973 2973 2978 2978 2979 2984 2985 2987 2987 2991 2992 2997 2998 2998 3003 3003 3007 3013 3022 3025 3028 3039 3042 3050 3055 3066 3068 3069 3081 3084 3084 3088 3088 3092 3094 3094 3095 3095 3097 3099 3099 3106 3110 3115 3119 3120 3120 3122 3125 3129 3129 3140 3141 3145 3147 3150 3153 3154 3156 3159 3164 3181 3181 3185 3186 3186 3196 3209 3212 3222 3223 3225 3225 3226 3228 3229 3232 3232 3235 3238 3240 3242 3243 3243 3244 3248 3256 3261 3266 3267 3268 3278 3278 3278 3283 3292 3296 3299 3301 3309 3309 3312 3312 3317 3325 3337 3339 3341 3356 3358 3360 3363 3365 3369 3369 3370 3377 3381 3382 3385 3388 3389 3391 3392 3392 3393 3396 3398 3398 3399 3399 3403 3406 3414 3415 3424 3424 3429 3430 3438 3440 3453 3456 3468 3469 3470 3478 3479 3485 3493 3496 3497 3500 3505 3505 3507 3512 3514 3518 3519 3519 3520 3520 3525 3526 3527 3527 3527 3535 3539 3540 3548 3554 3557 3566 3569 3571 3571 3572 3580 3585 3596 3600 3605 3606 3607 3607 3616 3619 3622 3624 3633 3643 3644 3653 3655 3656 3656 3656 3657 3658 3661 3663 3663 3668 3668 3672 3676 3682 3682 3683 3686 3691 3694 3695 3697 3703 3709 3713 3718 3720 3729 3733 3735 3742 3744 3753 3755 3758 3759 3770 3771 3775 3777 3779 3783 3784 3784 3789 3791 3800 3805 3809 3810 3813 3814 3816 3819 3819 3819 3820 3822 3824 3829 3840 3842 3845 3846 3846 3860 3866 3870 3872 3876 3881 3890 3899 3900 3910 3911 3913 3915 3918 3926 3926 3931 3933 3933 3933 3933 3937 3939 3939 3941 3944 3947 3947 3947 3951 3953 3956 3957 3959 3961 3973 3977 3983 3991 3994 3997 3997 4002 4028 4028 4031 4041 4044 4046 4046 4046 4046 4047 4048 4048 4050 4053 4057 4060 4061 4062 4074 4076 4084 4084 4084 4088 4089 4089 4089 4090 4095 4097 4115 4125 4125 4128 4133 4133 4141 4143 4144 4146 4147 4159 4160 4172 4174 4181 4181 4183 4185 4187 4191 4199 4200 4203 4203 4204 4204 4204 4209 4209 4212 4212 4217 4221 4230 4230 4232 4234 4246 4246 4247 4256 4256 4259 4259 4261 4264 4272 4272 4274 4288 4311 4316 4318 4318 4318 4318 4318 4327 4327 4337 4337 4337 4337 4343 4343 4343 4346 4346 4346 4346 4359 4359 4359 4360 4360 4361 4371 4373 4375 4377 4377 4377 4387 4387 4387 4417 4474"

print(CyclopeptideScore(peptide, ([int(x) for x in spectrum.split()])))

if __name__ == "__main__":
    CyclopeptideScore(peptide, spectrum)
