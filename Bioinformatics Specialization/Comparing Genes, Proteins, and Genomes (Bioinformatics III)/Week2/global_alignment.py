# Global Alignment Problem -
# Input: Two protein strings written in the single-letter amino acid alphabet

# Output: The maximum alignment score of these strings followed by
# an alignment achieving this maximum score. Use the BLOSUM62 scoring matrix
# for matches and mismatches as well as the indel penalty σ = 5.
import numpy as np

blosum62_matrix = {
    'A': {'A': '4', 'C': '0', 'D': '-2', 'E': '-1', 'F': '-2', 'G': '0', 'H': '-2', 'I': '-1', 'K': '-1', 'L': '-1',
          'M': '-1', 'N': '-2', 'P': '-1', 'Q': '-1', 'R': '-1', 'S': '1', 'T': '0', 'V': '0', 'W': '-3', 'Y': '-2'},
    'C': {'A': '0', 'C': '9', 'D': '-3', 'E': '-4', 'F': '-2', 'G': '-3', 'H': '-3', 'I': '-1', 'K': '-3', 'L': '-1',
          'M': '-1', 'N': '-3', 'P': '-3', 'Q': '-3', 'R': '-3', 'S': '-1', 'T': '-1', 'V': '-1', 'W': '-2', 'Y': '-2'},
    'D': {'A': '-2', 'C': '-3', 'D': '6', 'E': '2', 'F': '-3', 'G': '-1', 'H': '-1', 'I': '-3', 'K': '-1', 'L': '-4',
          'M': '-3', 'N': '1', 'P': '-1', 'Q': '0', 'R': '-2', 'S': '0', 'T': '-1', 'V': '-3', 'W': '-4', 'Y': '-3'},
    'E': {'A': '-1', 'C': '-4', 'D': '2', 'E': '5', 'F': '-3', 'G': '-2', 'H': '0', 'I': '-3', 'K': '1', 'L': '-3',
          'M': '-2', 'N': '0', 'P': '-1', 'Q': '2', 'R': '0', 'S': '0', 'T': '-1', 'V': '-2', 'W': '-3', 'Y': '-2'},
    'F': {'A': '-2', 'C': '-2', 'D': '-3', 'E': '-3', 'F': '6', 'G': '-3', 'H': '-1', 'I': '0', 'K': '-3', 'L': '0',
          'M': '0', 'N': '-3', 'P': '-4', 'Q': '-3', 'R': '-3', 'S': '-2', 'T': '-2', 'V': '-1', 'W': '1', 'Y': '3'},
    'G': {'A': '0', 'C': '-3', 'D': '-1', 'E': '-2', 'F': '-3', 'G': '6', 'H': '-2', 'I': '-4', 'K': '-2', 'L': '-4',
          'M': '-3', 'N': '0', 'P': '-2', 'Q': '-2', 'R': '-2', 'S': '0', 'T': '-2', 'V': '-3', 'W': '-2', 'Y': '-3'},
    'H': {'A': '-2', 'C': '-3', 'D': '-1', 'E': '0', 'F': '-1', 'G': '-2', 'H': '8', 'I': '-3', 'K': '-1', 'L': '-3',
          'M': '-2', 'N': '1', 'P': '-2', 'Q': '0', 'R': '0', 'S': '-1', 'T': '-2', 'V': '-3', 'W': '-2', 'Y': '2'},
    'I': {'A': '-1', 'C': '-1', 'D': '-3', 'E': '-3', 'F': '0', 'G': '-4', 'H': '-3', 'I': '4', 'K': '-3', 'L': '2',
          'M': '1', 'N': '-3', 'P': '-3', 'Q': '-3', 'R': '-3', 'S': '-2', 'T': '-1', 'V': '3', 'W': '-3', 'Y': '-1'},
    'K': {'A': '-1', 'C': '-3', 'D': '-1', 'E': '1', 'F': '-3', 'G': '-2', 'H': '-1', 'I': '-3', 'K': '5', 'L': '-2',
          'M': '-1', 'N': '0', 'P': '-1', 'Q': '1', 'R': '2', 'S': '0', 'T': '-1', 'V': '-2', 'W': '-3', 'Y': '-2'},
    'L': {'A': '-1', 'C': '-1', 'D': '-4', 'E': '-3', 'F': '0', 'G': '-4', 'H': '-3', 'I': '2', 'K': '-2', 'L': '4',
          'M': '2', 'N': '-3', 'P': '-3', 'Q': '-2', 'R': '-2', 'S': '-2', 'T': '-1', 'V': '1', 'W': '-2', 'Y': '-1'},
    'M': {'A': '-1', 'C': '-1', 'D': '-3', 'E': '-2', 'F': '0', 'G': '-3', 'H': '-2', 'I': '1', 'K': '-1', 'L': '2',
          'M': '5', 'N': '-2', 'P': '-2', 'Q': '0', 'R': '-1', 'S': '-1', 'T': '-1', 'V': '1', 'W': '-1', 'Y': '-1'},
    'N': {'A': '-2', 'C': '-3', 'D': '1', 'E': '0', 'F': '-3', 'G': '0', 'H': '1', 'I': '-3', 'K': '0', 'L': '-3',
          'M': '-2', 'N': '6', 'P': '-2', 'Q': '0', 'R': '0', 'S': '1', 'T': '0', 'V': '-3', 'W': '-4', 'Y': '-2'},
    'P': {'A': '-1', 'C': '-3', 'D': '-1', 'E': '-1', 'F': '-4', 'G': '-2', 'H': '-2', 'I': '-3', 'K': '-1', 'L': '-3',
          'M': '-2', 'N': '-2', 'P': '7', 'Q': '-1', 'R': '-2', 'S': '-1', 'T': '-1', 'V': '-2', 'W': '-4', 'Y': '-3'},
    'Q': {'A': '-1', 'C': '-3', 'D': '0', 'E': '2', 'F': '-3', 'G': '-2', 'H': '0', 'I': '-3', 'K': '1', 'L': '-2',
          'M': '0', 'N': '0', 'P': '-1', 'Q': '5', 'R': '1', 'S': '0', 'T': '-1', 'V': '-2', 'W': '-2', 'Y': '-1'},
    'R': {'A': '-1', 'C': '-3', 'D': '-2', 'E': '0', 'F': '-3', 'G': '-2', 'H': '0', 'I': '-3', 'K': '2', 'L': '-2',
          'M': '-1', 'N': '0', 'P': '-2', 'Q': '1', 'R': '5', 'S': '-1', 'T': '-1', 'V': '-3', 'W': '-3', 'Y': '-2'},
    'S': {'A': '1', 'C': '-1', 'D': '0', 'E': '0', 'F': '-2', 'G': '0', 'H': '-1', 'I': '-2', 'K': '0', 'L': '-2',
          'M': '-1', 'N': '1', 'P': '-1', 'Q': '0', 'R': '-1', 'S': '4', 'T': '1', 'V': '-2', 'W': '-3', 'Y': '-2'},
    'T': {'A': '0', 'C': '-1', 'D': '-1', 'E': '-1', 'F': '-2', 'G': '-2', 'H': '-2', 'I': '-1', 'K': '-1', 'L': '-1',
          'M': '-1', 'N': '0', 'P': '-1', 'Q': '-1', 'R': '-1', 'S': '1', 'T': '5', 'V': '0', 'W': '-2', 'Y': '-2'},
    'V': {'A': '0', 'C': '-1', 'D': '-3', 'E': '-2', 'F': '-1', 'G': '-3', 'H': '-3', 'I': '3', 'K': '-2', 'L': '1',
          'M': '1', 'N': '-3', 'P': '-2', 'Q': '-2', 'R': '-3', 'S': '-2', 'T': '0', 'V': '4', 'W': '-3', 'Y': '-1'},
    'W': {'A': '-3', 'C': '-2', 'D': '-4', 'E': '-3', 'F': '1', 'G': '-2', 'H': '-2', 'I': '-3', 'K': '-3', 'L': '-2',
          'M': '-1', 'N': '-4', 'P': '-4', 'Q': '-2', 'R': '-3', 'S': '-3', 'T': '-2', 'V': '-3', 'W': '11', 'Y': '2'},
    'Y': {'A': '-2', 'C': '-2', 'D': '-3', 'E': '-2', 'F': '3', 'G': '-3', 'H': '2', 'I': '-1', 'K': '-2', 'L': '-1',
          'M': '-1', 'N': '-2', 'P': '-3', 'Q': '-1', 'R': '-2', 'S': '-2', 'T': '-2', 'V': '-1', 'W': '2', 'Y': '7'}}

sigma = 5


def global_alignment(v, w, sigma, scoring_matrix, matches=None, mismatches=None):
    len_v = len(v)
    len_w = len(w)
    s = np.zeros((len_v + 1, len_w + 1), dtype=int)
    # print(s)
    # print(np.shape(s))
    backtrack = [[""] * (len_w + 1) for i in range(len_v + 1)]
    for i in range(1, len_v + 1):
        s[i][0] = - i * sigma
    for j in range(1, len_w + 1):
        s[0][j] = - j * sigma

    for i in range(1, len_v + 1):
        for j in range(1, len_w + 1):
            m = int(scoring_matrix[v[i - 1]][w[j - 1]]
                    ) if scoring_matrix else matches if v[i - 1] == w[j - 1] else mismatches
            options = [s[i-1][j]-sigma, s[i][j-1]-sigma, s[i-1][j-1] + m]
            s[i][j] = max(options)  # longest path

            if s[i][j] == s[i-1][j]-sigma:
                backtrack[i][j] = "↓"
            elif s[i][j] == s[i][j-1]-sigma:
                backtrack[i][j] = "→"
            elif s[i][j] == s[i-1][j-1] + m:
                backtrack[i][j] = "↘"

    score_max = s[-1][-1]
    i = len_v
    j = len_w
    while i != 0 and j != 0:
        if backtrack[i][j] == "↓":  # first option si-1,j - sigma
            i -= 1
            w = w[:j] + "-" + w[j:]
        elif backtrack[i][j] == "→":  # second option si,j-1 - sigma
            j -= 1
            v = v[:i] + "-" + v[i:]
        else:  # third option si-1, j-1
            i -= 1
            j -= 1

    for i in range(i):
        w = w[:0] + "-" + w[0:]

    for i in range(j):
        v = v[:0] + "-" + v[0:]

    return score_max, v, w


with open(r'C:\Users\18687\Desktop\Bio Informatics\Bioinformatics specialization\testsets\globalalignment.txt', 'r') as file:
    v = file.readline().strip()
    w = file.readline().strip()

# Formatting output on separate lines
answer = global_alignment(v, w, sigma, scoring_matrix=blosum62_matrix)
print('\n'.join(map(str, answer)))
