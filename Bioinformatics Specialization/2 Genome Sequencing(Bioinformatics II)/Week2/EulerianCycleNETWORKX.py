# Eulerian Cycle Problem - Returns the cycle generated by moving through the adjacency list of a
# directed graph that is Eulerian (balanced and strongly connected)
# USES NETWORKX

import networkx as nx


# Read the input data.
with open('C:/Users/18687/Desktop/Bio Informatics/Bioinformatics specialization/euleriancycle.txt') as input_data:
    edges = [line.strip().split(' -> ') for line in input_data.readlines()]

# Properly format the edges.
format_edges = []
for edge in edges:
    if ',' in edge[1]:
        for node in edge[1].split(','):
            format_edges.append([edge[0], node])
    else:
        format_edges.append(edge)


def EulerianCycle(format_edges):
    # Create the graph.
    G = nx.DiGraph()
    G.add_edges_from(format_edges)

    # Find an eulerian cycle.
    cycle = [str(e[0]) for e in nx.eulerian_circuit(G)]
    cycle.append(cycle[0])
    return cycle


path = EulerianCycle(format_edges)
print(" -> ".join(map(str, path)))

with open('C:/Users/18687/Desktop/Bio Informatics/Bioinformatics specialization/euleriancycleanswer.txt', 'w') as output_data:
    output_data.write('->'.join(EulerianCycle(format_edges)))

if __name__ == "__main__":
    EulerianCycle(format_edges)
