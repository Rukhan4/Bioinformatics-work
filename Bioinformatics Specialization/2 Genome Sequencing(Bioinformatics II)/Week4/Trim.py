# Trim -
# Input: A collection of peptides Leaderboard, a collection of integers Spectrum, and an integer N.
# Output: The N highest-scoring linear peptides on Leaderboard with respect to Spectrum.

integer_mass_table = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99,
                      'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114,
                      'D': 115, 'K': 128, 'Q': 128, 'E': 129, 'M': 131,
                      'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186}


def Trim(leaderboard, spectrum, n, amino_list=None):
    Scores = []
    for i in range(len(leaderboard)):
        Scores.append(LinearScore(leaderboard[i], spectrum, amino_list))
    leaderboard = [x for _, x in sorted(zip(Scores, leaderboard))]
    leaderboard.reverse()
    Scores.sort()
    Scores.reverse()
    SuperLeader = leaderboard[0:n]
    for j in range(n, len(leaderboard)):
        if Scores[j] < Scores[j-1]:
            return (SuperLeader)
        else:
            SuperLeader.append(leaderboard[j])


def LinearScore(peptide, spectrum, amino_list=None):
    """ 
    returns the count of the number of matches between linear spectrum of peptide and spectrum
    """

    s = spectrum.copy()
    count = 0
    for x in LinearSpectrum(peptide, amino_list=amino_list):
        if x in s:
            count += 1
            s.remove(x)
    return count


def LinearSpectrum(peptide, amino_list=None):
    """ 
     returns the linear spectrum of an amino acid string peptide given that
      we have a dictionary amino acid mass whose keys are the symbols of alphabet of amino acids
      and whose values are the integer masses of each symbol
    """

    prefix_max = PrefixMaxArray(peptide, amino_list=amino_list)
    LinearSpectrums = [0]
    for i in range(len(peptide)):
        for j in range(i + 1, len(peptide) + 1):
            LinearSpectrums.append(prefix_max[j] - prefix_max[i])
    return sorted(LinearSpectrums)


def PrefixMaxArray(peptide, amino_list=None):
    if amino_list is None:
        amino_list = integer_mass_table
    prefix_max = [0]
    for i, letter in enumerate(peptide):
        prefix_max.append(prefix_max[i] + amino_list[letter])
    return prefix_max


leaderboard = "DHWFIPETHNLCKLMWGSSFAWHWGRQCVIEASGTGQTTQAGCMWNGW YRDLSPCHYQESPDGWSRCQEHMHGDTFQCKFAERKCYLQDPRFKCWM HSQNSCDMNTHLAQENPNMCHLQSRQEDSAYGVIKATINYYQTANTQP LAYNCRHMQKWPECEWKMNICSAVEDISWCDKFYYKDQRFVATANGNC KMRMFEWKVKKKSPNPLPQNMCLCCMYGHSHKTCRNFVWIEWKELWEW EDIDTMTPDDAVSNDSFVWGNKLGMSMGIPVYEMQDMMYRLHIQQLSY AWPVMTQQMRHTQGSKVTANMFTWEVNWSDSHHGIHVCYNWPDHAISG RVYIIYCRTGCFICHKHTMETERIVTQITIWEFDNQVFKYVNHNTVYF DYAPQSEIYTHWVPHDTESERRTMDANKNKLTWICYMFDTDFTHTGQL CMFWAYNMKPQRIIREEAQSCLLGGALGDRIDCSNKMTFDPTFHMMWI FWATQKPIQPVTTQTTSQRFAWRVHCCEDNMSAAGLNTTSGFDISVSV MFDYEWEWRWQVSSNMDCQICLAKNWCQKVYNYTKFWYWKAVKCQQSW KCRQDPRHEPRIHPYPWSGGPVHKSDIHQTYKYHKLYDLFPRKTNAQH EIQGEVHKHCNIWEHEDIWQVMLNLLEQSACVTEDVTSDTHCSKHHIE ERDMNRDDNNDLEIKFMRISPQMKYQIHFSITKRIPKRFWPGQTWDIN QYCFNSREVLQQREPSQFVRSARAWTEEQDLYPFTMMTRAPLWHDWRF".split()
spectrum = [int(x) for x in "0 57 57 57 87 87 99 99 99 101 101 101 103 103 103 113 113 113 113 113 113 114 114 114 115 128 128 128 128 128 128 128 128 129 129 129 129 137 147 147 156 156 156 163 163 170 185 186 186 186 186 186 186 188 200 202 204 212 215 215 216 216 216 226 227 227 227 228 228 228 229 229 231 238 242 242 243 246 250 256 257 257 259 272 284 284 289 292 299 299 300 301 303 303 303 314 314 314 314 315 315 316 317 325 328 329 329 330 340 341 342 342 344 344 344 349 349 349 352 355 356 357 358 358 360 370 387 387 401 401 401 402 404 406 406 412 414 416 417 427 427 429 431 441 442 443 443 443 445 445 453 455 457 458 458 466 470 471 473 477 478 478 478 484 486 486 489 500 500 503 505 505 505 511 514 515 515 530 530 534 534 535 540 541 542 546 554 555 556 556 556 558 558 560 565 573 573 580 584 585 586 587 587 598 603 604 605 606 615 615 629 629 629 633 633 633 634 637 639 639 643 643 643 644 647 652 654 659 661 664 668 669 669 671 672 685 685 693 693 699 701 701 702 709 712 716 716 721 728 730 732 732 736 740 742 743 746 750 750 757 758 759 761 761 762 767 767 767 771 781 782 785 786 789 791 792 792 798 803 813 813 815 820 822 822 829 830 830 838 842 847 849 849 855 855 856 858 859 861 864 866 868 870 870 875 879 887 887 888 889 895 895 899 900 904 909 911 914 917 918 929 931 944 944 947 948 950 951 956 957 967 968 968 969 974 975 977 978 983 983 985 987 988 989 992 992 994 996 1001 1010 1013 1016 1016 1017 1024 1031 1031 1035 1038 1042 1045 1045 1051 1051 1058 1060 1070 1070 1075 1081 1086 1088 1095 1095 1096 1096 1097 1097 1102 1103 1104 1105 1107 1111 1113 1114 1116 1117 1129 1134 1137 1138 1138 1138 1139 1145 1145 1152 1154 1159 1171 1171 1171 1173 1173 1178 1179 1183 1188 1198 1199 1202 1208 1210 1214 1216 1217 1217 1224 1224 1225 1230 1231 1237 1237 1244 1244 1251 1258 1259 1265 1267 1267 1272 1272 1273 1281 1282 1282 1291 1291 1294 1299 1300 1301 1301 1308 1312 1313 1316 1318 1323 1325 1330 1331 1336 1338 1344 1345 1345 1345 1345 1352 1353 1365 1369 1373 1380 1384 1385 1386 1387 1393 1396 1400 1400 1400 1404 1404 1410 1410 1414 1417 1422 1426 1428 1435 1441 1443 1445 1446 1451 1452 1453 1453 1455 1458 1459 1459 1460 1471 1473 1474 1487 1494 1497 1498 1498 1501 1503 1509 1509 1515 1515 1517 1521 1528 1529 1538 1538 1540 1548 1554 1554 1555 1559 1560 1572 1572 1572 1572 1573 1573 1574 1581 1582 1597 1600 1608 1611 1612 1616 1616 1616 1616 1618 1623 1625 1626 1629 1631 1637 1639 1641 1643 1657 1660 1661 1668 1673 1674 1684 1685 1685 1687 1688 1695 1700 1701 1702 1703 1710 1710 1717 1722 1724 1725 1729 1729 1732 1737 1740 1742 1744 1744 1744 1754 1759 1767 1774 1786 1786 1787 1788 1797 1797 1798 1800 1801 1802 1804 1809 1812 1814 1816 1823 1823 1827 1829 1831 1838 1845 1847 1847 1851 1853 1857 1858 1870 1873 1887 1888 1896 1898 1899 1900 1901 1901 1903 1915 1916 1923 1925 1929 1930 1933 1937 1940 1942 1944 1952 1956 1960 1960 1960 1960 1960 1974 1975 1984 1986 1999 2001 2001 2009 2013 2014 2015 2017 2020 2026 2026 2029 2030 2032 2037 2039 2043 2043 2043 2051 2057 2058 2073 2085 2089 2089 2089 2103 2103 2112 2112 2119 2123 2123 2127 2128 2128 2130 2130 2130 2138 2142 2146 2146 2148 2154 2155 2158 2158 2158 2165 2171 2176 2187 2199 2202 2202 2205 2213 2226 2237 2240 2241 2241 2243 2245 2247 2252 2257 2258 2259 2259 2259 2266 2268 2274 2275 2275 2283 2286 2289 2300 2304 2304 2305 2309 2313 2327 2334 2339 2340 2341 2346 2351 2354 2358 2361 2361 2362 2370 2382 2385 2387 2387 2387 2396 2403 2415 2427 2433 2438 2438 2438 2440 2441 2442 2445 2447 2452 2452 2454 2455 2459 2474 2474 2483 2486 2490 2490 2490 2496 2498 2510 2516 2525 2540 2543 2546 2547 2554 2555 2555 2562 2566 2567 2569 2573 2573 2587 2589 2589 2599 2603 2603 2608 2610 2611 2624 2624 2644 2653 2654 2657 2661 2663 2668 2668 2669 2676 2676 2683 2686 2686 2690 2692 2710 2711 2712 2718 2736 2738 2743 2745 2752 2752 2753 2762 2771 2782 2782 2789 2789 2791 2796 2797 2797 2799 2799 2804 2819 2839 2839 2839 2839 2840 2846 2848 2855 2856 2873 2881 2885 2890 2890 2895 2898 2904 2912 2918 2925 2925 2938 2947 2952 2952 2960 2968 2968 2968 2969 2974 2976 2976 2985 2989 2998 3003 3005 3011 3024 3025 3026 3032 3041 3046 3053 3067 3067 3074 3077 3081 3088 3089 3096 3098 3102 3113 3116 3127 3133 3139 3145 3152 3153 3154 3154 3154 3155 3159 3168 3170 3188 3190 3191 3196 3197 3202 3215 3226 3232 3241 3253 3255 3257 3267 3272 3274 3282 3282 3283 3296 3297 3301 3302 3304 3305 3316 3325 3326 3339 3340 3345 3354 3356 3382 3385 3395 3395 3401 3402 3411 3413 3418 3419 3425 3429 3430 3430 3442 3443 3453 3454 3458 3458 3468 3483 3503 3508 3510 3510 3524 3529 3532 3532 3541 3541 3556 3558 3558 3558 3571 3581 3586 3590 3598 3611 3611 3613 3621 3637 3644 3645 3657 3657 3659 3661 3669 3684 3686 3696 3703 3710 3714 3726 3727 3739 3746 3750 3756 3760 3760 3772 3774 3787 3789 3797 3799 3807 3813 3823 3838 3840 3855 3859 3859 3874 3890 3900 3900 3902 3907 3916 3916 3925 3935 3936 3936 3951 3955 3968 3977 3987 3999 4003 4006 4024 4028 4044 4056 4063 4063 4063 4064 4064 4083 4090 4090 4102 4122 4127 4137 4147 4162 4162 4184 4184 4191 4192 4203 4219 4240 4249 4250 4250 4250 4260 4265 4283 4290 4291 4294 4312 4347 4353 4378 4378 4393 4394 4396 4405 4407 4411 4412 4436 4450 4477 4506 4506 4509 4524 4533 4539 4541 4563 4564 4568 4580 4605 4636 4637 4667 4692 4695 4696 4697 4708 4727 4749 4791 4795 4799 4823 4823 4825 4855 4883 4894 4894 4912 4928 4951 4951 4997 5011 5011 5041 5041 5050 5079 5114 5139 5144 5153 5178 5197 5227 5242 5281 5300 5300 5325 5355 5428 5428 5428 5456 5531 5541 5584 5584 5644 5687 5712 5800 5815 5928".split()]
n = 5

print(*Trim(leaderboard, spectrum, n, amino_list=None))
