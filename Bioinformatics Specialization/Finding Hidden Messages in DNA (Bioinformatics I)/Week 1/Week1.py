# A simple function to convert a list of values to a line of values with no separators
def ConvertToWords(s):
    s = ' '.join([str(pos) for pos in s])
    return s

# Pattern count - Counts the number of times the given pattern is seen in a string of DNA(Text)


"""
Text = "TAGACCTTAGCTCCAACTTAGCTCGCCTTAGCTCTTAGCTAGTGAAATCTTAGCTCGGGCGGAACTTAGCTGAGACTTAGCTCCCTTAGCTCTTAGCTACTCTTAGCTTACTTAGCTCTTAGCTCCTTAGCTTTTGCTCTTAGCTGCAGCTTAGCTGCTTAGCTTCCTTAGCTAGCCCTTAGCTCATCACTGCTTAGCTCCTTAGCTTTCTTAGCTCCTTAGCTGCATCAGACTTAGCTGACACCTTAGCTCTTAGCTTCTTAGCTCCTTAGCTCCTTAGCTCACCTTAGCTCCTTAGCTAACTTAGCTCTTAGCTAAACTTAGCTTCTTAGCTTTCTTAGCTCTTAGCTTTCTTAGCTGAGACCTTAGCTGCTCTTAGCTACTTAGCTTCTTAGCTCTTAGCTTGAGGCCCTTAGCTCTTAGCTGCTTAGCTGTGTCTTAGCTACGCCTTAGCTCCTCTTAGCTCTGGCCCTCTTAGCTTCTTAGCTCTTAGCTCTTAGCTCCCCGAACTTAGCTCTTAGCTCTTAGCTCCCTTAGCTCTTAGCTACTACTTAGCTCTTAGCTCCTTAGCTCAACTTAGCTACTTAGCTGGTCTTAGCTTGCTTAGCTTCACAAATCTTAGCTCTTAGCTAATTATCTTAGCTCTAATTGCTTAGCTATGACTTAGCTGCTATACTTAGCTTACTTAGCTCTTAGCTCCCTTAGCTCTTAGCTCCTTAGCTCTTAGCTCTTAGCTATCCTTAGCTTCTTAGCTCGGAACTTAGCTGCGCTTAGCTCCTTAGCTCTTAGCTCTTAGCTCCCTTAGCTCTTAGCTGGCTTAGCTCTTAGCTCCTAGAGACTTAGCTGGCCCTTAGCTTGGCCTTAGCTCGCCTTAGCTTAGTACTTAGCTCTTAGCTAACTTAGCTCGCTTAGCTTGAGCTTAGCTTTTCCTTAGCTGAGTGCGGCTGGTTATCTTAGCTACATCTTAGCTCTTAGCTTTGTCTTAGCTCGGCACTTAGCT"
Pattern = "CTTAGCTCT"
"""


def PatternCount(Text, Pattern):
    count = 0
    for i in range(len(Text) - len(Pattern)+1):
        if Text[i:i+len(Pattern)] == Pattern:
            count += 1
    return count


print(PatternCount(Text, Pattern))

# Frequency map - returns the most frequent k-mer in a string of DNA(Text) as a dictionary of lists

"""
Text = "TTGTTTACCAGAAGGGAATACTCTGGATGCCCGTTGTTTACAATACTCTCAGAAGGGTTGTTTACCAGAAGGGGGATGCCCGCAGAAGGGTTGTTTACTCGACCACAATACTCTAATACTCTTCGACCACCAGAAGGGGGATGCCCGAATACTCTTCGACCACTTGTTTACTCGACCACAATACTCTAATACTCTTTGTTTACTTGTTTACAATACTCTAATACTCTAATACTCTGGATGCCCGTCGACCACCAGAAGGGTTGTTTACTTGTTTACGGATGCCCGCAGAAGGGTTGTTTACCAGAAGGGTTGTTTACTTGTTTACCAGAAGGGCAGAAGGGCAGAAGGGGGATGCCCGTCGACCACCAGAAGGGAATACTCTTCGACCACCAGAAGGGGGATGCCCGCAGAAGGGTTGTTTACAATACTCTTTGTTTACTCGACCACCAGAAGGGGGATGCCCGTTGTTTACGGATGCCCGTCGACCACTCGACCACGGATGCCCGGGATGCCCGAATACTCTGGATGCCCGTTGTTTACTTGTTTACCAGAAGGGAATACTCTGGATGCCCGGGATGCCCGGGATGCCCGTTGTTTACGGATGCCCGAATACTCTGGATGCCCGAATACTCTAATACTCTGGATGCCCGTCGACCACCAGAAGGGCAGAAGGGGGATGCCCGCAGAAGGGCAGAAGGGAATACTCTTCGACCACTCGACCACCAGAAGGGAATACTCTTCGACCACTCGACCACTCGACCACTTGTTTACTCGACCACGGATGCCCGTCGACCACGGATGCCCGCAGAAGGGTCGACCACTTGTTTACAATACTCT"
k = 13
"""


def FrequencyMap(Text, k):
    freq = {}
    n = len(Text)
    for i in range(n-k+1):
        Pattern = Text[i:i+k]
        freq[Pattern] = 0
        for j in range(n-k+1):
            if Text[j:j+k] == Pattern:
                freq[Pattern] = freq[Pattern] + 1
    return freq

# Frequent Words - returns all most frequent k-mers in a string of DNA(Text) where k-mer length is given as k
# uses Frequency map


def FrequentWords(Text, k):
    words = []
    freq = FrequencyMap(Text, k)
    m = max(freq.values())
    for key in freq:
        if freq[key] == m:
            pattern = key
            words.append(pattern)
    return words


print(FrequentWords(Text, k))

# Reverse complement - returns the reverse complement string of a given input of DNA (Pattern)

"""
Pattern = "TGCTATGACTTACTGATGTAAACGAACACTTCAGCGCAGCTATGATACTGCTCGGTCAATTATTGATTTCCCGATAATAGTTCCTTTATCCGGGGGAAGCATAGCAAACTCGGAGTGACACCACCAAAAATTCTGGAATCGCGGTTTCGGGCTTCTTCAGGCGTTTCACTGAAACATATGCAATTCGCAGACTGTACTGCCTCGAAACACAAAGTGGGCTGATCGTCATGTAAAGGGATACCGATGTGCCTCACAATCTGTCGCCTATGGCTCGTTTGTGAGCAGTACTGCTTATGAGGGGTTCCTAGCCATGACCACCGGCTTTCGTCTAATCTTAACTGCGTTCCTCCTTAGCTGCTTCTTAGGGTCTATATGCCTATGGTGTTCAGAATACTACGTAGTAATTCCCAGCCTTCAGGGGTGCCAGGGGCCTAGGTCACGGATCATTCTAGCGAGGGAGACCTGGGCATAAAATCCTACCCCCAACTCTAGCGCATTCGTCCGACGCCACCCGCAAAGATATGGAAGCAGTTTGCCCTGTTCATCCGTCGACGGGGGTGTTTGCGCTGGGATCCGGCGACAATAGCGGTAAATGTCGCCTGTTCGTGAGTCTCAGGCCGAGTAGGCGTGACCGCTGATGCGTCTCCCACAGATGGCAGGGAGGTTCTCGCTCACTTTCTCTGTTATCAAGTTTTCGATGAAAATGGAGACTCTTGGGAAGACTGGATTGCCCTTTGCGCACGGAGCGCATCTATGTTGCTGAAAGATCATATCGACCGTTAGTAGCCGACCCACCCTGATCCTCTGCCAGGGCTTTTTATGCAATTTACAACCGGAAGCAGACCTACACATGCTATCTCACCACTTGAATGCACACCAAGTTCTGCTGAATTGACCTTGGCGTTTCAACCTAGCAAGTTTATACTCCCGAAATCCCAGTCTCAACTTAGGGCCTGACAAGAGTGGGAGGCGTATGGTTCTGAATCACCGATGAGGTTAAACCAATTTGACCGAGGCGTGAATTATCACATACTTCTCCTAGCGAGGAGTGCCATGCTTTCCCCTGATACGTGGCCGCTAAATCATGGGAGAGGTAACTCGAAATATAGTCTGAACCGGTCACGACTTATGCTGAGTCTACTGAAGACAGAAACGCGTCTTGCATCTATCGCGAGTTCAGAATCACAATAGGGTGCGGAGCTTTTGGGCGGAGCGAGAAACATGCGAACTCCCGCATACACGATCCGGGGAGCTCCACCCCATGCCTTACGAAGATTGGCAATGCGTGATACATCGGACCGAAATATTAACTTGGCGTGCATCCTTCAACTCTTGGCCACCATGTAGCTAGCTTGCTTGAATACTATCAGCCAACGAGACTTGTAGCGGCATACCTCGTTGGAAGGTGCAAGGCCATAGGTTAGCGCAGTTGTGGTCGGAATGCCTTCAGCCTAGGCTCCTAAGAGTAATGGGTGTACATAGGTACCAGGGCTCCAAGATGTCTGCTCTAATCTCTCCTAGGGCCAATGGGAGGAAATACCGGCAGGGACAATCACATAAGCCGTCGGTGGGACGGTGTTTGTTACAATTTGCTCAACGACTGCGGTAGCCGACTATTTTACAGCGGCTACTGCCGCGGGAGCAGGTATTCCGGATGCGCATGGACGACTACCTAGTAGCTCATCCACCTGAAAACATCTTCGATATTTCTGCGGATGGTGTTTAACGGATGTAATATTAATAATTCCTGGAGCTTGGAAGAACCGGCGAAACGGCAGCTTGTCGGTGCAGATATTTAGTTGGTGCCTTAGAGTTAAGAAGGCGTCCGTGTATGGGGGGGACCGAGTGCGGGAGTGTGACATATCCGGATCTGTACAACACACAAAAGGTCAAAGATTCGTTTTGAGGACTGGAGATCATGCTGGGACGGTGGTGGTGTGCAAGCCTGACTGAGAAGTATATACTCAGTCGTTTCTTCGACCTTTAGCGATAGTACTTTAGCAAAACAATGCCATCCACACAACTTGATATTGGTCGTCGCGCACTAAAGATCCTACGGGCGCGCACCTTATGTCGACCGGGTAAGAAAATGGTGCAGGTGGACGGGGATCGGCCTATTTGCGTGATAGCGACCCGGCGGCTACAACAAAGTAGCGTATGACCTCCTCGCAGCGCCCGAGCCTCTGGTCGTAATGCGAACGGTCAGCGTGGATTTATCGCGTTGTTTTCATCCTGTAATTAGATCTCCTTTGATAATCGGTGGTGACGTCTATTCTCTTTAGAACGATATTTGCCGTGAGTGGAACGCTCCACGAGGTACGTCCTTAATTTTCGTGGCAGTTTCTTTTATCGCCCAAAGCCGCGTTCTCCTTTTCTCAAGACCGGTCCGGCACAAAGCGGCAGGGTACCTCAAACCAAGCATTTATCATTTGACGTTTGCCTTCGCACGTAGCGTGAGCCGAAGAACGTTAAGTTCTTTGACGATAAATGCTGATCAGGACCCCACACTGTCCAAGATTCGGAAGATCTATCGAACAACGGTGTTTGGTGTTTCCATGCCAGCAGGCGCACAGAGACGTGAAGTTGCATTGACTCCGCCGGACGGGGGGCTTAGTTTACTAAGAATAGGTCAATACTTACTGGACAGTTCGCGATACTCTTCCGGTGCTGCAGCGAAAGTTTAGGCGGACTATAATGGGCGGGCTACTATATCGAAACATGGATCCATTCATTTATAGCCTGCCTTGCATTTATGCGTCTAAGCACAACTGATTTTCCACGGACTAGGCCCCTTCGCACCCTTGTTGCATTACGATAGAAGACCTGCCAGACCAGCCATACTGGACGTGGTTGATCTCTCCTCCACAATAGGGTAGGGACGGACGCTCACGGTGGTGCTCAATGGTTTGTTTTACGTACTTCAACAGTGGGGCGATGCGCCAAACGTAGTGTAAAGCGAATGCATCGTCCGTCCTCGATCACGTTTTACGCCGGTTTAATATTAGGCTCCTTGGTCGTGCAAATGCTATCATCTCCCTCCCTAATTCCGGGAACTTGCCCCTCGAATTAACCACAAATGCATTCCCTATTATCTAATAGACCGCCGAGTACGGGTTCCGAGGGCCGGTTACTTTCAGCTAGCCACTATTGCCAATCCATTGCCAATCCTAAAATCCACTCAGGTAGTATATAGCTATCAGAGCCCTACGGGCAGGACAGGTCGCGCCTCCGTAACAGTCGAACCATAATGTCCGTGCGGCCCTGTACTCCGATGTGTATGGGTCTGGTCTTACGATATGGTTTAGTAGAACGTTTAGTAATGTGCTGGCTCTCTAGTCCTGGGCCTCACCGGACAAGGTCCATTCCGCCTCGTCTCAAGTTAAGTTTTCTACACTTGGGGCCAATGCCTTACGCTCTGCTTATGGACGTGGCAGATCGATAGTTGAGAGTACTGCCGTAACGTGTTATTATTAACAGACGGAAGGTGGGGCGACGGAAGACAACCCATGTAGTGATCATCCAATTCGTGTCTCGACTACTTGCTTTAGACCTGTTTGGTCGACAGTACCCCATCGTTCCCTGGGACTGAGTGCGTACGCGTAAGCTGCGATAAACGTCACGAGATTCGCTAATGGCGATTTTTGGCAGATTAAAGTAGTAGTGGCATTGGACCGTCTTCAAGCCTACGCCCCCTTGATTTTAGGCTTTCGAATCTTTACGATGCAGTTGTAAAAGACGACGAAGCCCAAGGGAACATTAAGCACAACACTCACCATGCGACTGTCCCCTGATGTTAGAACCATGTGTGTGTGGCGGTACCTTGTGTGCACCACACTACAGGTCGCTCGACCTTTGCATCCCCGTGCTAAGGGCGATCCTCCGTCCTAGCCAGGATGCACCTTAATAACCTTAGCATATACCTTTGCCGTAGCGTGCCGCCAGTACGTACATATCTTGTGTGGGACGCCCGAATACAGGTACGATGAATTCTAGTGTCTTGTCCTACCTGGTACAGGCAAATTAGAATAGGGAGAAAATCTATCTACAGACGTACATTAGCGTACCTAGAAACATATGCGCGTACTATTGTATGTTGATTATTACATACCGATTAAGCTAGTTTGATGCACGACAAATATGAGTGCTAGTATGAGTAACGGTATGACAATGGAGACTTCTCCGCCATTGTCTCAAGCGTATATCGACTGGTACGGGACAGCGCAGAAGCGTAGATTGTCGCCGCACAGTGGTCGTCAAATCCATGATGCTCCTGGAATGGACTTCACCAGTAATCTGTCCTGTTAATGTCACTATTACCACCCGGGTGCTTAAACCTGAAGCTGCATGTCGGAGTAGGTGCAGCAAGAACACGACACATGAGACGTTAGTGAGATTATAGAGGTGGATTCTTTTCAAAGTGGAACTTTAGGCACCTAGACGTTCGTGCTAGTTATAGATAGAGTCAACTGGAACTCAACTATCGTTGGGTTCTCTAGCTGCATGGTAACACTATTGCATTGCTAGACTCTCATGAGAACCAATGTCCAACGGTCGATATCTGTAGCAGTGGAGAGACGTTATAGCCGGGTAAACGGTTGATCGGTTCCAAGGTTGGTTTCCATAATGTGCACGTAGGGAAGACTGCTTTGCTCTTCCTGTCCGAGTTTAGTACGTCGTAGTATGCAACTGTCACTGCATTATCCCGGTTAATGCGCTGTGAGTAGGCGGGTTCTTAGACTAGACGACACTAACGGCACGTGGTGACTCCAAGACTGGGCTTAGATTTTTATGTCTCTGGCCAACAGAATTCACGAATGTAAATAGATACGAGAAGATAGTACTTCGGATAGACCAGTCCCAATTAGTGGGAGCTGTCGACGAAAATCTACGGTACTGTGATCCTCCTGCTTACCGTGCCTCATTTACATTACTCAAAGGCATGCACACCACTAGGCAGCGAAAAACGGAGGTTGCTGCGGCGAAATGGTAAGTACCTTGAAGGAAATACGCCAACACGGGGCCAGCAGTGTTAATAGCTCCCCGGATAACACTCTTCTCCACTAATCTCTAATCAAAGACGCACTCCTATGAAATTCAAACTTTCATTGACGACCGGGCGCAACCCACCCCACGTCTTTGAGTGATGGCGGTGCATGGCTCGAGACGATAAGTTTCAGCAGCAGGCAGGTTTTAATAAGGTTCGCCAGGGCACACCGGTGCCATACCGTTCGCTTACAGCCCTTTGACGAGTCAGCCACTGTCATGGGGACTAAATTTAAGGATGTTCGGCGAGCCGCGAACTGTTCTTACAACTATATGCCAGTGGGAAAACAATTCGACATTCATGACCCTTACCCTCTCACATTCTGAAGTCAGAAGCTAGTAATTTATAGGTGACATAGTCTCCAGATCGTGCAGAATCCATAACGGGGTGGCGGAGCAGAACTGCACATCCTTTCGCACTGACCCATGGCGCATAGACGCTAGTCGCTAATCGAGATCCTTAGTTGGGAACCTCCCGTTCGGCTAATAAGCGTCTGACGGACTAACATTCTTCTGACCAGCCATGAGTTCTCATTTCTGCAATAGTAATTCTCACCATCTCATATTTCTGCATGCCAATTACCGTCGGATCGCCATGCGGCACACGACATATTCGGTCCACGTCCTTCCTCCAAATTCACTGAAAAAAGGTCAGAATATTATCGTCTCAGCACATTCGGTGACGGGACCTGCCTAGCCTGAACCCCACTATGTCAAGGAGCCCATTCGAAATAAATGAATCTCCCTTTACCATTCGGCGGCGGGTCGAACCTCAAAGGAAACGTAAGGAATCGCGTCTGAAGTCTAAGGCAGTAATCCAAGCTTCCAGATCTTGGTTTGATCCTGCGCCCTAAGGAGGTATAGGATATCTATTGACATAGTTCTACGAGGAACCGCTACGGATTACGCTTTGACTCCTCCGTACCAATTACGATTCGAGGAAGAAACATAGATGTAGTCTAATACATGGATACACATTTCTGTCTCTGGATTTGACCGCCGGCCGCTATACGGAGAGGCCGCCCCGTTATTCGCCGGGAGGATCAACCTATGGAGGGCAAATCCGGCCTATTCATATTGGCTTTATCCAGAAGTATAAAGCTTGCGCGAGAGATTGTCTGACCAACAGAGGGCCAGAAAGACCTTTTAAGGTTGTTACATCCCTAAGTCCAGGGATACGCTGGCATGCCGCGGTTTTTCTCCTAGTTCTGTTCGGTTCCACGTGGTAGTTGGACATGTTGGATCAGTAAACTCCTTCATCAGCCAGCAAAAGAATGCGCTGTACAGAGACCGGTATCACCGAAAAACTGGGTCACCGGGCGATTCCCCGATCATTTATGATTATGCATGTTAGGCAGGCTGAGCTACACGAGATTGCATTTTGACTTCATAATTTGCGGATTTCGGAGCAAATCGGCTCCGTCATTTGTCAATGAGCCGAGGACGGTACTTCCTAATAGATAGCGTATAATCGGGTACGGTTTAAGCCCTAGAGCACATAATCATTCCGAGTCAGACACAGCGGTGACCAAATTGAATGAAGGTTAAACATCAACGGAGATCCTAACTCCTGTCGTTTGCGTTGCTTCCGATACTGTTTGTGGGAGATTTATATTAGCAAACTATCCTAACATTAAGCCAACCCCGTAGATCCGCTCCCACCTATCTGGATTGAATGAGGGACGCATGCACCCTTAAAGGGGAAGTTCGTGACTTGGACAACAACGTCAATCAATTAAGGAGCTAGCACCGCGCTAAAGCTGTAGAACAAACAGGCTAGGATCTGCAGTGTATTGTGGATAATGGTCTAGTGCTGCGGTTCGTTAAACATAGTACAGCGCGAGACCTGTCCCAACGTGTGTATGTTAAAGGGGTTGTTAAGGGTTCCTTTAATGACCGCGGGTCCTAGCTTTCTGGAAGATCAAGCTACACGACTACGGCACAGCGCGAAGTAGATCTGGGTCGCTGGCGACTACCTGCCGCCACATTACCGACAAATTAAGACTCAGGCCGGTACACTCCCAAATCGACAGCTATGACAAAGCCAACGCTCGCGAGGCCCTTTGTCAGACGGTTATAACGCAGATCTAACCCAAGGCTCTTAAGCAATGGGGTGAAAGGGTCTTATAGAAAACGGTCAAATCGAACATTGTCTACTCTTACAGCTGAAAGGTTTAGTAATGCCCTTGTGAATACCCCAAAGATAGGTATGACGATTAGAGCTAGATTCTGGTGGTTCGATTACTTATGTCTTAAGTTAGACGCTATTTGTGAGTCCCCGGATGTCCGCAGGAGTTAGGGCCCATTGTGCGAGTTAATAGCGCCATATGGCCAGTGCCCAGGTAACTGTTAACGTATTCGATATCGGGGGAGGGCTCTTCATTGGTGTCCCTGTATTTCGTCTGTGCTTACCTTCCCAAGCTCGATACAAAAGATATTACGTCGCTGGCAAAGTTCTCGCGCCGAAGTATACCGGCGTTGGGCATACGGGTCAGCGTCAGTTGATCGGATTGTGCACAGGTGATGGGGAGACGCACACCAGAGACCCCCTTTTTTCGCGTTCTGTCAAGCGCTCGACGGCGAACAACTGCTCCGAGAGCATGCCTCACTCTTTAGGTACGATTCCCTATAGCTTGGTATTTTTGATTAGTCATAATCCTCCAAACCAAATCAAAAAAAGTACACCTTCTTTACCACAGTGCAATGTCATTGCCGCTGCCTTTACCACAGTGAAAATGTTACAAGAATCTGAAAGAAACCCTCAGGTACTAAGGCGCGATAATTTTTACTCTGCTCACTTTTGAGAGAAGGGCACCGGCAATCCGAGCGGTTAGCCCAAGGGATCCCATATAAAGAGGGTCCACGAGTTACCGCTGTCAGATCAGGTGAGGTACCAAATATCAGGCGTAACATCGGTGATGCGCCTAGAGTTATATGTAGTGTCGCACGCCGAGGTTACCCGATATGCGGTCCCAGCGACCTGTCCCCTGTTGCGATCTACTCCTCGCAGCCAGGGTGTCGTCTAGTGACTTGCGAGGGGCTATCATACGAGACACCCAAGCAGATCAAAGTGCTGTTAGACTATTTCTATTCGCCCAGAACAGTAGTCCATATATGGCAGTCAGCCCCAAAGTCTTGTATTGGGCCTCCTTACGCAGAGCACCTAGGGGTTCAGACGCCGTATAC"
"""


def ReverseComplement(Pattern):
    return Pattern[::-1].replace("A", "t").replace("T", "a").replace("C", "g").replace("G", "c").upper()


print(ReverseComplement(Pattern))


# Pattern match -  A collection of space-separated integers specifying all starting positions
# where Pattern appears as a substring of Genome.

""" 
Pattern = "GGCCGATGG"
Genome = "GACGGCCGATGAGGCCGATGGCCGATGGCCGATGGCCGATCGGCCGATGGCCGATCGGCCGATCGACGTCTGGGCCGATGCGCTCGGCCGATTGGGCCGATGCTGCCTGAGGCCGATACGGCCGATTGGTGGCCGATTTGGCCGATCGGCCGATGGCCGATGGGCCGATTGCTTGGCCGATCTATCAATCACTGGCCGATTCGCGGCCGATGGCCGATGGCCGATGGCCGATCGAGGGCCGATGGCCGATACTTACGGGCCGATGCTGGCCGATCCTCGAGAATTGGCCGATAGATGCGGCCGATTGGGCCGATGGCCGATGAGGCCGATGGGCCGATGGCCGATCGGCCGATTGGCCGATCCGAAAGGCCGATCCAGGCCGATCGCCGGCCGATGGCCGATCTGGCCGATGGCCGATGGGCCGATGGCCGATTTGGCCGATCCGGGCCGATGGCCGATTGGTGGCCGATCGAATGACGGGCCGATAAGGCCGATACTATGGCCGATACGGCCGATGGCCGATGGCCGATGGAGGCCGATCGGCCGATGGCCGATGGCCGATGGCCGATCCGGCCGATGGCCGATGGCCGATCTGGCCGATGGGGCCGATGGCCGATAGCCAGGCCGATGGCCGATGGGCCGATAGGTACGGTAACCATATGTGGGCCGATGCAGGCCGATGGGCCGATATGGCCGATAGGCTTTACTGGCCGATACAGGCCGATGGCCGATGTTCGGCCGATTGGCCGATGGCCGATATTGGCCGATGGGCCGATTCAGGCCGATGGAACTGGCCGATCGGCCGATGGCCGATATAGGCCGATGGCCGATCGGGCCGATGGCCGATGCGGAATCTTTGGTCGGGCCGATTGAGTGGCCGATGCCGGCCGATCTTGGTGCAGGCCGATGGCCGATCGCTGGCCGATGTAGGCCGATAGAGGCCGATTTGTACGGCCGATGTGATGGCCGATGGGGCCGATCGGCCGATGCGTTAGGCCGATCAGGGCCGATGGGCCGATGGCCGATTCCCCCGGCCGATTAGGCCGATAGCAAGGCCGATTAAATCGGCCGATGGCCGATGGCCGATTGGCCGATGGCCGATGGATGGCCGATTGCTGGCCGATCAAATCTTTGGCCGATGTGGCCGATTGGCCGATGGACGGCCGATGGCCGATTGGCCGATGTAGTTGGATCGGCCGATGGCCGATCAGGCCGATGGCCGATGGCCGATCCGGCCGATAGGGGCCGATGGGGGCCGATAGGCCGATGCCGCTTCCGGGGCCGATGGCCGATTGGCCGATACGGCCGATACGCTGGCCGATGCACGGGCCGATAGGCCGATAGGGCCGATTTGGCCGATGGCCGATCCACGGGCCGATATCAGGGCCGATCGGGGCCGATGGCCGATGGCCGATCCGGCCGATTGAACACGAAGGCCGATATCGAGGCCGATTGGCCGATCGGCCGATGTGGCCGATGAGCGGCCGATTAAAAGGCCGATTGGCCGATCGGGCCGATCCTCTGGGCCGATTCGGGCCGATGCGCTGCGGCCGATTTTTCAATCCACCGGCCGATTGAGAAGGCCGATGGCCGATCAATGCGGCCGATTGGGGCCGATGGCCGATGGCCGATAACACAGGCCGATTAGGCCGATGTGGCCGATATCGGCATTGGCCGATGGCCGATGAGCCACCCTTGGGCCGATGGCCGATGGCCGATGGCCGATGCATAGGGCCGATGAAGGGCCGATTGGGCCGATAGCCTGGCCGATGGCCGATGGGCCGATCGGCCGATGGAGGCCGATGGCCGATGGCCGATGGGCCGATCTTACTAACGGCCGATACGGGCCGATGGAATACCGGCCGATGAGAACTATGGCCGATGCGGCCGATAGGGCCGATCCGGCCGATAATGGCCGATGGCCGATAGGCCGATGGCCGATTCTATTCGGCCGATCTGGCCGATAGGCCGATTATGGCCGATGTAAGGCCGATGGCCGATGGCCGATCGGCCGATGGGCCGATACTCGATGGCCGATCCCTGGCCGATCTTGGCCGATGGCCGATGGGCCGATTGAGGCCGATGGGCCGATGGCCGATTTGGGCGGCCGATGGCCGATATTGTAGGCCGATTTTGGCCGATGAAGAATTCGGGGCCGATAACTGGCCGATTGGCCGATCCGGGCGTTGGCCGATAGGCCGATGGGGCCGATATTGGCCGATGGCCGATGACGGCCGATTCATGGCCGATCGGGCCGATTCAGGCCGATGGCCGATGGCCGATTATTCCGGCCGATAGGGCCGATCATGGCCGATGGCCGATGGCCGATAATTCGGCCGATGGGGCCGATGGCCGATTTAGGCCGATTAAAGCGGCCGATACCATGGCCGATAGGCCGATTGGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATCAGGCCGATGGCCGATAGCGGCCGATCCGGGCCGATGGCCGATGCAGGCCGATGGCCGATTAAGGCCGATCGGCCGATGGCCGATAGGCCGATGGCCGATTGGCCGATCCCAATCGGCCGATCGGCCGATGGCCGATTGGCCGATCCGGCCGATATTAAAGGCCGATGGCCGATGGCCGATGGCCGATAACGGCCGATGGCCGATGGCCGATGGCCGATGAGGCAGGCCGATATGAAAGATAAGGCCGATGGCCGATGGCCGATGGGGCCGATAGGCCGATGTTGGGGCCGATGGCTTCGCTCTTGGCCGATGGCCGATGGCCGATCGGCCGATCCGGCCGATGGAAGGCCGATTGTAGGGGCCGATCTGGCCGATATGGCCGATCCGCTGGCCGATCTGTTTGGGGCCGATCCCGATGGGCCGATGGTATGGCCGATCGGGCCGATGGCCGATCTAGGCCGATGGCCGATCGGCCGATGGCCGATCGGCCGATGGCCGATGGCCGATATTGGCCGATGCGGCCGATCGCTTGGGCCGATTATTGGCCGATGGCCGATGGCCGATGTGAGTTATTGGCCGATGGCCGATATGGCCGATGAGGGGGGCCGATGAGGCCGATACTACCGTGGCCGATGGCCGATCGGCCGATGGCCGATCAGGCCGATTTGGCCGATGAAATGGCCGATATGTGGGCCGATTGTGGCCGATGTGTAGGCCGATAGGCCGATGGCCGATAGCCGGGCCGATAAGAAGGGGGCCGATGCCCGAACGGCCGATATACAGTCAGGCCGATGAGGCCGATGGCCGATGGCCGATGGCCGATAGGCCGATGCGGCCGATAGGCCGATAATGATAGCTGGCCGATGAGGAGCGGCCGATCGGTACCGGCCGATTGGGCCGATTAGGCCGATTTTCGTTCAGGGCCGATACCCGCCGGCCGATTCCGAGCGGCCGATGGCCGATGAACAACGTCAGTCCATGGCCGATCGGCCGATCAAGACAAGGCTTGGCCGATATAATGGCCGATAGGCCGATAGGTTGAGACGTCAGGCCGATTATGGCCGATCGGCCGATAGTTGGCCGATCTTGTTGGCCGATCGTAACGTGGGCCGATTGGGCCGATAGGCCGATCACGGCCGATGAGGCCGATGGCCGATGGCCGATACGCAGAGGCACTTGGGCCGATTGGCCGATACGGCCGATTGGGCCGATAGGCCGATGGCCGATCAGGCCGATGCTTGGCCGATTAGGCCGATGATTAAGGCCGATTGAGGCCGATAGGCCGATATGGCCGATTAATGGCCGATTTCGAACCGGCCGATTGCGGTAGGCCGATGGCCGATGGCCGATGACGGGATGGCCGATAGGGCCGATGGTAGGTAGACACCCAGGCCGATGTTGGCCGATTGGCCGATTCAGGCTCAAAGGCCGATGTGTGGCCGATGAGGCCGATGGCCGATCGGCCGATTGCTATGGCCGATGGCCGATGGCCGATCCTCCGGCCGATGGCCGATGGGGCCGATGCCGTACGCGGGCCGATGGCCGATAGCGGGCCGATCATTATAGGCCGATTGGCCGATCGGCCGATGGCCGATGGGCCGATAGGGCCGATGATGGCCGATAGGGGCCGATCCTGGCCGATGGCCGATCTGGCCGATGGCCGATGGCCGATGGGCCGATTCTACGGCATCTGCGGCCGATGGGGCCGATGGCCGATATAGCGGCCGATGGCCGATCTGGCCGATGACTAGCGGGAGGCCGATGGCCGATAGGCCGATCCGGCCGATGGCCGATGAGGCCGATGGAGCGGCCGATTGGCCGATGGCCGATACTTCTCCGATTGGCCGATGGCCGATCGGCCGATGGGGCCGATTGTGTTAGGCCGATGGCCGATTGGCCGATGGGCCGATGGGCCGATCCCTGGCCGATGGCCGATGGCCGATAGGCCGATGGGCGGACAACGCGGCCGATAGCCTGGCCGATGGGCCGATAGGGCCGATTTCCCCGCCTGGCCGATGCTGGCCGATCGCCAGCCGGGCCGATAGAGCGGCCGATAGCTTCGGCCGATGGGCCGATGGCCGATGGCCGATTAGGGCCGATACCTTACGGCCGATAGGCCGATACCGGCCGATCGGGCCGATGGCCGATCAGGCCGATTGGCCGATATCGGCCGATGGCCGATCGGCCGATAGAGGGCCGATACTGGCCGATGGCCGATGGAGGCCGATGGCCGATGAGGCCGATAGGGCCGATAGGCCGATAAATGGCCGATGGCCGATGGGCCGATCCGTAGGCCGATGTTTCGGCCGATTGTATTCTTAGGCCGATGGCCGATTGCAGCGGGCCGATCGGCCGATGGGCCGATATGGCCGATGAGGCCGATGGGCCGATACGGCCGATTAGGCCGATACGAGGCCGATGCGGCCGATTAGGCCGATCCTGGCCGATACCCCGCAATTGAGGATGGCCGATGGCCGATTGATTAGATGGCCGATTGGCCGATCGTGGCCGATGGCCGATTTGGCCGATAGTAGGGTGTACCCAGATTTGGCCGATGACCCCGGGCCGATGCTGGGCCGATGGCCGATCGGGCCGATGTTGGCCGATGGGGCCGATAAGGCCGATTTGGCCGATCGGCCGATGATAGGCCGATGGCCGATCGGCCGATTGGCCGATGGCCGATCCTACACCGGGCCGATGGGCCGATGTGGGCCGATTGAGGGCCGATGGCCGATCAGGCCGATTCTACGGCCGATCGCTGATGGCCGATAGTTTTGGCCGATCTGGCCGATGGGCCGATGGCCGATGTTTGGCCGATCCCTCACGCTGGCCGATGGCCGATGGCCGATGGCCGATCCTCAACTGCATGGCCGATTGGCCGATGGAGGCCGATTGGCCGATGGCGGCCGATGCTGGCCGATCACGGGCCGATGGGCCGATAGGCCGATGGAGGTCGCTGGCCGATCCGGCCGATCCGGCCGATTGTAGGCCGATGGCGGCCGATGGGCCGATGGGCCGATGAAGGCCGATACATAAGGGCCGATGGCCGATGATATGATGGGCCGATGGCCGATGGCCGATGGCCGATTCACGGGCCGATGGCCGATTGGCCGATGGCCGATGAGCGGCCGATGGGCCGATCAGTGAGTGCCGGGCCGATGGCCGATAGGGGCCGATTGCGGTGGCCGATTGGGCCGATGGCCGATAGGCCGATACATCGGGGCCGATGGCCGATGTAAGGCCGATGGGCCGATGGCCGATGGGCCGATCGGGCCGATTTGCTACCAGCGGGCCGATGGCCGATAGAGGATGGCCGATAGCGTAGGCCGATCTTGGCCGATGGCCGATGGCCGATGGCCGATGGAGGCCGATTTATGGCCGATGGGCCGATGGCCGATCATGGCCGATTGGGGCCGATGAGGCCGACTTTCTTTGGCCGATTTGGCCGATATCTAAGGCCGATAGGGGTATTGCTTAGAGGGCCGATCCCGGAGAGGCCGATTGGCCGATCGAACACCTGGCCGATGGCCGATGGCCGATCAGGTAGGCCGATGGCCGATGTAGTGGCCGATGTCGAATGGCCGATGTGAGGCCGATATTGTTGAACTGGCCGATGGGCCGATCGGCCGATGTCAGGCCGATAAATAGGCCGATGCACCGGGGCCGATGGCCGATGGCCGATGGCCGATGGGGCCGATCAGGTGGCCGATGGGCCGATGCTCCAGGCCGATTCGGCCAGGCCGATTGGCCGATAACGAAGGCCGATCGCAGTTTCTGGCCGATGGGCCGATGTACTGGCCGATAAGGGCCGATGGCCGATTGGCCGATGGCCGATATCCCGGCCGATTACGGCCGATGAGGCCGATGGCCGATTTTAGGCCGATGTGGCCGATTGGCCGATGGCCGATACCGGCCGATACCGGCCGATTCGGCCGATGAGGGCCGATAGGCCGATGGCCGATATGGCCGATCTACCGGCCGATCGGCCGATGGCCGATGGCCGATGCGGCCGATAGACAATGTCAAGCGAAATGGCCGATGGAGTGGCCGATGTGGCGGCCGATGGCCGATGAACGGCCGATATGAGGCCGATGGCCGATCGGCCGATGGCCGATCCCGTAGGCCGATCCGTTGGGCCGATCGGCCGATGGGCCGATTCGGGGCCGATGGGGCCGATCAGGCCGATAGGGCCGATCGTAATAGAAGGCCGATAGCATTTACCCGGGCCGATATCGGCCGATTGGCCGATTAGCTGCCGGGCCGATTGCTCAGGCCGATGACGGCCGATCTGGAGGCCGATACGGCCGATCGTACGGCCGATTGGCCGATCGGCCGATGGGGCCGATGGGGCCGATAAGGCCGATTGGCCGATGAAATAGGGCCGATGGCCGATTGGCCGATACTGGCCGATGCTACGGGCCGATGGCCGATTGGCCGATTGGCCGATGGCCGATGGGCCGATATGGCCGATCAGGCCGATGGCCGATGGGCCGATGCTGGGGCCGATCAATCTGGCCGATGGGCCGATCGGCCGATTGTCGGCCGATGGCCGATGGTAGGCCGATGACGCAAGGCCGATTGTGGCCGATCGGCCGATCAGGGCCGATTGGCCGATTGCATAAATTAGGCCGATGGTGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATACTTGGGCCGATGGCCGATAAGCTTAGGCCGATGGCCGATACCAGGGCCGATTTGGCCGATAAATACAAAGCAATGGCCGATTAACTGGCCGATACGGCCGATTTGGCCGATAGGGGCCGATCTGGGCCGATGGCCGATCGGGCCGATCAGGCCGATCACGGGCCGATCAGGGCCGATTGGCCGATGGCCGATGGTGGGCCGATAAGGGCCGATGGCCGATCTTAAGAGGCCGATGGCCGATGGCCGATGGCCGATTGGAGCCCAATAGGCCGATTGGCCGATCTTGGGAGAAAGGCCGATAGCCTGGCCGATCAGATAACGGCCGATGGCCGATGGGGCCGATATGGTTGGGCCGATTCGGCCGATAACTGGGCCGATCCGGCCGATGGCCGATGGCCGATGGCCGATCATATACCCGGCCGATCGGCCGATGTGGCCGATTGGGCCGATGGGCCGATCCTGGCCGATGCGGCCGATCTATGGCCGATGGCCGATCCAGGCCGATGGGGCCGATGTGAGGCCGATAGGCCGATAGGGCCGATGGGCCGATGGCCGATAATGGCCGATGGCCGATGGTAAGGGCCGATCCCGGCCGATATAGGCCGATAGGCCGATATGGCCGATGCCGGGCCGATGGCCGATCGGCCGATGGCCGATATCGGCGGGCCGATGGCCGATAGGCCGATCCTGGCCGATTAAGGTGGCCGATTGGCCGATGGCCGATCTTCTGGCCGATGTAGTGGCCGATCCGGATTTCGGCCGATATTGGGCCGATGTTGGCCGATAGGCCCGGGCCGATTAGGCCGATATTGGGCCGATGGCCGATTGCGGCCGATGGCCGATAGGCCGATCCTGGCCGATGTCAATTGAGGCCGATAAGCCCTGGCCGATGGCCGATTGCGAAGGACCGGCCGATGCGGCCGATGGCCGATTGGCCGATCAACTCGGCCGATTCACGGCCGATATGGCCGATGGCCGATTGGCCGATGAGGCCGATTGAGGTAAAGGGCCGATGGGCCGATGGCCGATTGAGGCCGATAGGCCGATTTAAGGCCGATGGCCGATGGCCGATGCGGCCGATCATGGCCGATAGGCCGATAGGCCGATCACGGGGCCGATCACTGACGGGGCCGATAATAGGCCGATCCTTGGGCCGATGGCCGATTACGTGGCCGATGGGCCGATAAATAGGCCGATCCGGCCGATGGCCGATGTTGGCCGATCCGGCCGATTAGGCCGATATTCATTCTACCTGGCCGATGGCCGATTGGCCGATCGGGCCGATAGGGCCGATGGCCGATGGCCGATGGCCGATTTTACGGGCCGATGGGCCGATCGTAGGCCGATAGCGAAGGCCGATGGCCGATCGCGAGCCTGGGCCGATGGCCGATGGCCGATAGTATCAGGCCGATATGAAGGCCGATGGCCGATGCGGGGCCGATCATACATGGCCGATCGCGGGCCGATCCAAACGGGCCGATCGAGGCCGATCGACATGGCCGATCCCATTTTGGCCGATGGCCGATTCCAACGGAACGTAATAACGGCCGATGGCCGATAAAGACCGGGCCGATGGCCGATCCCATCGGGCCGATCAGAGGCCGATCGGCCGATGGGGCCGATGGCCGATCCGCGAGGCCGATGGCCGATCCTCTGGGCCGATGGCCGATGGCCGATAGGCCGATCGAGGCCGATGGCCGATTGGCCGATTGATGGCCGATTTAGTGGCCGATCGGCCGATCGGGCCGATTTGTGGCCGATGGCCGATGGCCGATGCTCGCCTGGCCGATGGCCGATCAAGGCCGATACGGCCGATGGCCGATGGTTGGCCGATTGGCCGATCCGGGCCGATCCAGGGGCCGATGGCCGATGGCCGATGGCCGATAGGCCGATATTGGCCGATGGCCGATGCTGTGGCCGATCGCGGCCGATTTCGGCCGATGGCCGATAGCGCAGGGCCGATAGGCCGATAGGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATATGGCCGATGGCCGATGTTGGGCCGATTAGGGCCGATGGGCCGATGGCCGATTAGGCCGATGGGCCGATGGCCGATGGCCGATTCGGCCGATACTGGCCGATGAAGGGGGGCCGATATACGGCCGATTGTGGCCGATCGGCCGATAGGCCGATGGCCGATGGCCGATAGGGCCGATCAAATTGGGGAGGCCGATGCCTTAGCAGGCCGATTAGGGCCGATGGCCGATCGTGGCCGATGGCCGATGAGGCCGATGGGCCGATGGCCGATCGGCCGATCCGGCCGATTTCTCGCTCGGCCGATGGCCGATAGGGCCGATCATTGGCCGATCGGCCGATGTCCATCCGGCCGATGGCCGATTCTCACGGGCCGATTTGGCCGATGGGCCGATAGGCCGATTTTGGCCGATGGGCCGATAGAACGGCCGATAATTTGGCCGATAGGGCCGATTCAATATATGCGTGCGGGCCGATACGGCCGATGGCCGATGGCCGATGGCCGATGGCCGATGGTGGCCGATAACCCGCGCCCTGGCCGATTGTGGCCGAT"

for E.coli data set:

Pattern = "CTTGATCAT"
with open('Vibrio_cholerae.txt') as f:
    Genome = f.read()
f.close()

OR

f = open("Vibrio_cholerae.txt",mode = "r")
if mode(f) == "r":
    Genome = f.read()
f.close()
"""


def PatternMatching(Pattern, Genome):
    Positions = []
    for i in range(len(Genome) - len(Pattern)+1):
        if Genome[i:i+len(Pattern)] == Pattern:
            Positions.append(i)
    return Positions


print(ConvertToWords(PatternMatching(Pattern, Genome)))


# Find Clumps - Returns all distinct k-mers forming (L, t)-clumps in Genome, where L is the length of ori
# and t represents this clump being found at least 't' times
# uses PatternCount

"""
genome = "GCGGTTATGCACCGTTCAAATTAGCAAACCACTAAGCGACGTAGTCTGGATTGATTTCTCCCTACCAGTGACCCAAGACGCGTTAGTGAGTTAAGTTCATATCCAGTACCTGCCGCCCTCTGTACTTGGGCGTCCGATTCGCATGCTTACTCAGGTGGAGGACACGATAATCTGATTAAACTGAGCTAAACCAGGTGGAACCAGAAACCAGGTGGGGAGTCTCGCTTCAAGCCGTTCTTGCGATCAAACCAGGTGGTCCATTATGAAACCAGGTGGCTAAACCAGGTGGTCCAGATCCTCGAATGATGTCGGTGCACATCAAAACCAGGTGGGGTGGTGGAACGTAAAACCAGGTGGCATAAACCAGGTGGGCCGGTTCGTAAACCAGGTGAAACCAGGTGGGGTGGAAACCAGGTGGGTTACAAATTACGTTGAGATGGCCCAAACCAGGTGGTGGGCTTCACCCATGTCAACAAACCACCCTATGGAACTAAACCAGGTGGAACCAGGTGGTGAAGGCTTATCCTCAGGAAAAACCAGGTGGAGGTGGTGAAATAAAACCAGGTGGACCAGGTGGATAACCCTCGCCTCGCTTCTCAACCGAGACCTGGATAAACCAGGTGGGGTGGTCCACCGATTTTTGAGACACTAGAAACCAGGTGGGCGGGGAAACCAGGTGGCAAACCAGGTGGGGTGGACGGAAACCAGGTGGATATGTCATAAAACCAAACCAGGTGGTGCACCCCCATGGTGTGTCTTATCCGTGCGTATAAACCAGGTGGTCGCACGGCTTCCACTTGCTGAGAATAGGCCCGCAGGGTCAGTGCCATGCCCTCCGTCACTCGATATGTGTTGTAAGAGTGGTTACCCCTTCATTGAAGTCGCCCACAGCCCCACCTGCATTGCTAGACTATCACCCTACAGTAGGCCTTTTCGCCTTCTTCAAGCAGCAATCTCTTATCCGCGGATGGGCGCGGCGAGCGTGGCGTCCCCGAACATTTTTACCTAACGTGTTTTGTTGGCCGCAAGCCTTCCCTCTAGTCCACCTCAGCCATTCAGCCTAGTAGCTTTCAAGCCGAGCCTTCCATATCTAATGGACCGTCCAGAATTTCACACGTTTCACAGGGCTGTGTTCGACCGCCCGTAATGCTGTTTCACAGGCGATCGCCTTGCGGTTTTTTCACAGATCGCAGCCGATGGACATGCCAACTCGATTTTCACAGAGTTTTTCACAGCGGTTTCACAGCACAGCAGTGATTGTTTCACAGCAATTTTCACTTTCACAGGGGCCCTTTTCACAGCTCAGGGCTCTTTTCACTTTCACAGTTTCACAGCGCTCCTTTCACAGAGCGGGGAAATTTAAGGGAACACTCAAGGGAACAAGGGAACACACAAAGGGAACACAACACAACACATAAGGGAACACTTTCACAGAACACAAAAGTCCGAAATCATCAGCGGCGAAGGGATTTCACAGACAGACACTTTCACAGCGCATTTCACAGATACGTACTTTCACAGGCGTACTTTCACAGACTTTCACAGAGGACAAGCTCAATTTTCACAGACAGGCTGGATAAATTTCACAGCGGTAAGGGTTTCACAGCACACATAAGGGAACACGAATTTCACAGCAGGGAACACCTCTACGAGTAATCTATTACTCTACCTACTGAAGGGAACACACCGAAGACCTACTATTACCTATTACTCTTAAAGGGAACACATTACAAGGGAACACACTCTCTCGTCATATCTCACCTCTCTATTACTCTTAAGGGAACACCTTCTCGATCAACCTATTACTCTATGGAGATAGAGATATTCCAGACATATGGAGATAACATGGAGATATGGAGATAATGGAGATGGAGATAGCTCTTATATTTATCCTATGGAGATATGATACTATTAATGGAGATAATTCTAATGGAGATATAATTACTCTAAGAGGATGGGATCTCGGGCTATTACTCTAATGGAGATAAGCACTATTACTCTAGGAAATGGAGATATGTCAATGGAGATATGTAATGGAGATAGAGGGAGATGGAGTCGCCATTTCATAATCGCCATTTCATAGTTCAGGAATCGCCATTTCCGCCATTTCTAAGATGGAGTCGCCATTTCTACGTATGGAGATAGGATCGCCATTTCATACGACCCGTTGGATATCGCCATTTCCTCGCCATTTCTGGTGACATTTCTCGCCATTTCATTTCTGGAGATAGATGGATCTCGCCATTTCATAGGAATCGCCATTTCCACGTAGGGGGGGCCACAATCCGTAGGTCGGAATTCAGACTCGCCATTTCCCATCGCCATTTCTTCACCTGTATGCCGATCCCTTCGCCATTTCTCATGGAGATAACTCTCTCTCGCCATTTCTCGCCATTTCCATTTCACTCTCATTCGCCATCGCCATTTCCATTCGCCATTTCATCGCCATTTCTTCAGGATAAGATATCGCCATTTCGACTCTCATTCGCATACTGACTCTCATTCTCATCTCGCCATTTCTCATCTGACTCTCATCCTGGGGGAAACTTGCGACTCTCATCACACTTCCGTCGACTCTCATACTGGCGGATAGCATAGGAGCCATTTAAAGACTCTCATTCTCATTCGAGACTCTCATTCAAATCCTACGAGGACTCTCATATAGACTCTCATATCATTACGAGGACTCTCATATACGAGCCATGCATGTGGCGACGACTCTCATCTACGAGCCATGCAAGCAGAATCTACGAGCGACTCTCATTACGAGCCATGTGACCGTACGAGCCATGCATGCATGCCATGCTGACTCTCATCGAGTACGAGCCATGGAAGTTCTTGTTGGTTCGTAGCCCAAGAGCTGAAGTTACGAGCCTACGAGCCATGAAGTTACTTTTACGAGCCATGAAGCTTACGATACGAGCCATGCGAGCCATGCATCCGCGCTACGAGCCATGTTCCAGTACGAGCCATGTTAGTTGCTGAAGTTAAGTTTGGCGCTGAAGTTTGTACGAGCCATGTGCCCGCTGAAGTTTGTTGTACGAGCCATGCATGCTGAAGTTAATGGCTGAAGTTAGCGTTTGCGGGCAGATCCTCATTCTACGATACGAGCCATGCCATGCAGCTGAAGTTAAGTTGGGTTACGAGCCATGCGAGCCATGTGAAGTACGAGCCATGCTGGCTGAAGTTGTTTGTGCTGCTGAAGTTGCTCTTGTCTCTAGCTGAAGTTGCCAACAGGGCTGAAGCTGAAGTTTAAGCTGAAGTTGCGAGCAGGCTGAAGTTATCGGATTGGGGCTGAAGTTCAACCTCCCGTCCCCCCACACTATATTCCCGTCCCCCCCCGCGCACGCGCCGTCTCCCGTCCCCCCTATCCCGTGCGCACGCGACGCGATCCCGTCCCCCCAGAGTGCGCGCACGCGTCCCCCTTCCCGTCCCCCTCTCCCGGGCGCACGCGTCGCTCAACATTTCCGCGCACGCGTCGCGCACGCGGGCGCACGCGGGTCCCGTCCCCCCCCCTCTTCGGCGCACGCGGAATTCCCGTCGCGCACGCGTCCCGTCCCGCGCACGCGTCGCGCACGCGACTGCCCTAACCAACAGTGCGCACGCGCCGGTAACCCGGTAACCCGGTAACCGCGCACGCGGGCGCACGCGCGTAACCCGCGCACGCGCCGCGCACGCGGCCCGGTTCCCGTCCCCCCCGGTAACCCGGTAACTCCCGTCCCCCGTAACCCGGTGCGCACGCGCCCGGCGCACGCGGAGCGCACGCGCCCCCCCCGGTAATAGCGCACGCGCCCGGGCGCACGCGCCCGGTAACCCGGTAACCCGGGCGCGCGCACGCGGCGGCGCACGCGGCGCACGCGGCGCACGCG"
k = 11
L = 566
t = 18

for E.coli data set:

k = 9
L = 500
t = 3
with open("E_coli.txt") as f:
    genome = f.read()
f.close()
"""


def FindClumps(genome, k, L, t):  # k is len of k-mer/DnaA box, L is length of genome, t is occurence
    count = {}
    for i in range(L):
        pattern = genome[i:i+k]
        if (PatternCount(genome, pattern) == t):
            count[pattern] = PatternCount(genome, pattern)
    print(" ".join(count.keys()))
    return count


print(FindClumps(genome, k, L, t))

"""more efficient Clump finding solution:

def scan_clumps(k, L, t, text):
	# Break down message in k-mers.
	# kmers = [ k-mer1, k-mer2, k-mer3, ...]
	kmers = [text[i:(i+k)] for i in range(len(text)-k+1)]
	kmers_per_window = L-k+1

	# Get all the k-mers from the first window of size L and calculate frequency
	f_kmers = {}
	for _kmer in kmers[0:kmers_per_window]:
		f_kmers[_kmer] = f_kmers.get(_kmer,0) + 1

	# Keep valid clumps as initial solution
	solution = {x:v for x,v in f_kmers.items() if v >= t}
	
	# Sliding window of size L across the list of kmers
	# For each iteration:
	# 1. Decrement the frequency of the k-mer leaving the window (i)
	# 2. Increment the frequency of the k-mer entering the window (i+kmers_per_window)
	# 3. If the frequency of the k-mer entering the window is greater than t, save as candidate solution
	for i in range(0, len(kmers) - kmers_per_window):
		old_kmer = kmers[i]
		new_kmer = kmers[i + kmers_per_window]
		
		f_kmers[old_kmer] -= 1
		f_kmers[new_kmer] = f_kmers.get(new_kmer,0) + 1
		if (f_kmers[new_kmer] >= t):
			solution[new_kmer] = max(solution.get(new_kmer,0), f_kmers[new_kmer])

	return(solution)

with open('E_coli.txt') as f:
	text = f.read()
	res = scan_clumps(9, 500, 3, text)
	print(len(res))
f.close()
"""
